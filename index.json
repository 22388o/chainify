[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Address.js",
    "content": "export default class Address {\n  constructor (address, derivationPath, index = false) {\n    this.address = address\n    this.derivationPath = derivationPath\n    this.index = index\n  }\n\n  toString () {\n    return this.address\n  }\n\n  toLocaleString () {\n    return this.address\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/Address.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Address",
    "memberof": "src/Address.js",
    "static": true,
    "longname": "src/Address.js~Address",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/Address.js",
    "importStyle": "Address",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Address.js~Address",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Address.js~Address#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "address",
    "memberof": "src/Address.js~Address",
    "static": false,
    "longname": "src/Address.js~Address#address",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "derivationPath",
    "memberof": "src/Address.js~Address",
    "static": false,
    "longname": "src/Address.js~Address#derivationPath",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "index",
    "memberof": "src/Address.js~Address",
    "static": false,
    "longname": "src/Address.js~Address#index",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Address.js~Address",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Address.js~Address#toString",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "toLocaleString",
    "memberof": "src/Address.js~Address",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Address.js~Address#toLocaleString",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/Client.js",
    "content": "import { get, upperFirst, find, findLast, findLastIndex, isArray, isBoolean, isFunction, isNumber, isString } from 'lodash'\nimport * as Ajv from 'ajv'\n\nimport * as providers from './providers'\nimport DNSParser from './DsnParser'\nimport { Block, Transaction } from './schema'\nimport { sha256 } from './crypto'\nimport {\n  DuplicateProviderError,\n  InvalidProviderError,\n  InvalidProviderResponseError,\n  NoProviderError,\n  UnimplementedMethodError,\n  UnsupportedMethodError,\n  ProviderNotFoundError\n} from './errors'\n\nexport default class Client {\n  /**\n   * Client\n   * @param {string|Provider} [provider] - Data source/provider for the instance\n   * @param {string} [version] - Minimum blockchain node version to support\n   */\n  constructor (provider, version) {\n    const ajv = new Ajv()\n    this.validateTransaction = ajv.compile(Transaction)\n    this.validateBlock = ajv.compile(Block)\n\n    /**\n     * @type {Array}\n     */\n    this._providers = []\n\n    /**\n     * @type {string}\n     */\n    this.version = version\n\n    if (provider) {\n      this.addProvider(provider)\n    }\n  }\n\n  /**\n   * Add a provider\n   * @param {!string|Provider} provider - The provider instance or RPC connection string\n   * @return {Client} Returns instance of Client\n   * @throws {InvalidProviderError} When invalid provider is provider\n   * @throws {DuplicateProviderError} When same provider is added again\n   */\n  addProvider (provider) {\n    if (isString(provider)) {\n      const {\n        baseUrl,\n        driverName,\n        auth\n      } = DNSParser(provider)\n\n      const rpcProviderName = `${upperFirst(driverName)}RPCProvider`\n      const pathToProvider = `${driverName}.${rpcProviderName}`\n      const ProviderClass = get(providers, pathToProvider)\n\n      if (!ProviderClass) {\n        throw new ProviderNotFoundError(`${pathToProvider} not found`)\n      }\n\n      const args = [ baseUrl ]\n\n      if (auth) {\n        args.push(auth.username, auth.password)\n      }\n\n      return this.addProvider(new ProviderClass(...args))\n    }\n\n    if (!isFunction(provider.setClient)) {\n      throw new InvalidProviderError('Provider should have \"setClient\" method')\n    }\n\n    const duplicate = find(\n      this._providers,\n      _provider => provider.constructor === _provider.constructor\n    )\n\n    if (duplicate) {\n      throw new DuplicateProviderError('Duplicate provider')\n    }\n\n    provider.setClient(this)\n    this._providers.push(provider)\n    return this\n  }\n\n  /**\n   * Check the availability of a method.\n   * @param {!string} method - Name of the method to look for in the provider stack\n   * @param {boolean|object} [requestor=false] - If provided, it returns providers only\n   *  above the requestor in the stack.\n   * @return {Provider} Returns a provider instance associated with the requested method\n   * @throws {NoProviderError} When no provider is available in the stack.\n   * @throws {UnimplementedMethodError} When the requested method is not provided\n   *  by any provider above requestor in the provider stack\n   * @throws {UnsupportedMethodError} When requested method is not supported by\n   *  version specified\n   */\n  getProviderForMethod (method, requestor = false) {\n    if (this._providers.length === 0) {\n      throw new NoProviderError('No provider provided. Add a provider to the client')\n    }\n\n    const indexOfRequestor = requestor\n      ? findLastIndex(\n        this._providers,\n        provider => requestor.constructor === provider.constructor\n      ) : this._providers.length\n\n    const provider = findLast(\n      this._providers,\n      provider => isFunction(provider[method]), indexOfRequestor - 1\n    )\n\n    if (provider == null) {\n      throw new UnimplementedMethodError(`Unimplemented method \"${method}\"`)\n    }\n\n    if (isFunction(provider._checkMethodVersionSupport)) {\n      if (!provider._checkMethodVersionSupport(method, this.version)) {\n        throw new UnsupportedMethodError(`Method \"${method}\" is not supported by version \"${this.version}\"`)\n      }\n    }\n\n    return provider\n  }\n\n  /**\n   * Helper method that returns method from a provider.\n   * @param {!string} method - Name of the method to look for in the provider stack\n   * @param {object} [requestor] - If provided, it returns method from providers only\n   *  above the requestor in the stack.\n   * @return {function} Returns method from provider instance associated with the requested method\n   */\n  getMethod (method, requestor) {\n    const provider = this.getProviderForMethod(method, requestor)\n    return provider[method].bind(provider)\n  }\n\n  /**\n   * Generate a block\n   * @param {!number} numberOfBlocks - Number of blocks to be generated\n   * @return {Promise<string[], TypeError|InvalidProviderResponseError>} Resolves\n   *  with Block hash of the generated blocks.\n   *  Rejects with TypeError if input is invalid.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async generateBlock (numberOfBlocks) {\n    if (!isNumber(numberOfBlocks)) {\n      throw new TypeError('First argument should be a number')\n    }\n\n    const blockHashes = await this.getMethod('generateBlock')(numberOfBlocks)\n\n    if (!isArray(blockHashes)) {\n      throw new InvalidProviderResponseError('Response should be an array')\n    }\n\n    const invalidBlock = find(blockHashes, blockHash => !(/^[A-Fa-f0-9]+$/.test(blockHash)))\n\n    if (invalidBlock) {\n      throw new InvalidProviderResponseError('Invalid block(s) found in provider\\'s reponse')\n    }\n\n    return blockHashes\n  }\n\n  /**\n   * Get a block given its hash.\n   * @param {!string} blockHash - A hexadecimal string that represents the\n   *  *hash* of the desired block.\n   * @param {boolean} [includeTx=false] - If true, fetches transaction in the block.\n   * @return {Promise<ChainAbstractionLayer.schemas.Block, TypeError|InvalidProviderResponseError>}\n   *  Resolves with a Block with the same hash as the given input.\n   *  If `includeTx` is true, the transaction property is an array of Transactions;\n   *  otherwise, it is a list of transaction hashes.\n   *  Rejects with TypeError if input is invalid.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getBlockByHash (blockHash, includeTx = false) {\n    if (!isString(blockHash)) {\n      throw new TypeError('Block hash should be a string')\n    }\n\n    if (!(/^[A-Fa-f0-9]+$/.test(blockHash))) {\n      throw new TypeError('Block hash should be a valid hex string')\n    }\n\n    if (!isBoolean(includeTx)) {\n      throw new TypeError('Second parameter should be boolean')\n    }\n\n    const block = await this.getMethod('getBlockByHash')(blockHash, includeTx)\n\n    if (!this.validateBlock(block)) {\n      throw new InvalidProviderResponseError('Provider returned an invalid block')\n    }\n\n    return block\n  }\n\n  /**\n   * Get a block given its number.\n   * @param {!number} blockNumber - The number of the desired block.\n   * @param {boolean} [includeTx=false] - If true, fetches transaction in the block.\n   * @return {Promise<ChainAbstractionLayer.schemas.Block, TypeError|InvalidProviderResponseError>}\n   *  Resolves with a Block with the same number as the given input.\n   *  If `includeTx` is true, the transaction property is an array of Transactions;\n   *  otherwise, it is a list of transaction hashes.\n   *  Rejects with TypeError if input is invalid.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getBlockByNumber (blockNumber, includeTx = false) {\n    if (!isNumber(blockNumber)) {\n      throw new TypeError('Invalid Block number')\n    }\n\n    if (!isBoolean(includeTx)) {\n      throw new TypeError('Second parameter should be boolean')\n    }\n\n    const block = await this.getMethod('getBlockByNumber')(blockNumber, includeTx)\n\n    const valid = this.validateBlock(block)\n\n    if (!valid) {\n      const errors = this.validateBlock.errors\n      throw new InvalidProviderResponseError(`Provider returned an invalid block, ${errors[0].dataPath} ${errors[0].message}`)\n    }\n\n    return block\n  }\n\n  /**\n   * Get current block height of the chain.\n   * @return {Promise<number, InvalidProviderResponseError>} Resolves with\n   *  chain height.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getBlockHeight () {\n    const blockHeight = await this.getMethod('getBlockHeight')()\n\n    if (!isNumber(blockHeight)) {\n      throw new InvalidProviderResponseError('Provider returned an invalid block height')\n    }\n\n    return blockHeight\n  }\n\n  /**\n   * Get a transaction given its hash.\n   * @param {!string} txHash - A hexadecimal string that represents the *hash* of the\n   *  desired transaction.\n   * @return {Promise<ChainAbstractionLayer.schemas.Transaction, TypeError|InvalidProviderResponseError>}\n   *  Resolves with a Transaction with the same hash as the given input.\n   *  Rejects with TypeError if input is invalid.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getTransactionByHash (txHash) {\n    if (!isString(txHash)) {\n      throw new TypeError('Transaction hash should be a string')\n    }\n\n    if (!(/^[A-Fa-f0-9]+$/.test(txHash))) {\n      throw new TypeError('Transaction hash should be a valid hex string')\n    }\n\n    const transaction = await this.getMethod('getTransactionByHash')(txHash)\n\n    const valid = this.validateTransaction(transaction)\n\n    if (!valid) {\n      const errors = this.validateTransaction.errors\n      throw new InvalidProviderResponseError(`Provider returned an invalid transaction: ${errors[0].dataPath} ${errors[0].message}`)\n    }\n\n    return transaction\n  }\n\n  /**\n   * Get a raw hexadecimal transaction given its hash.\n   * @param {!string} txHash - A hexadecimal string that represents the *hash* of the\n   *  desired transaction.\n   * @return {Promise<string, TypeError|InvalidProviderResponseError>} Resolves with the raw Transaction with\n   *  the same hash as the given output.\n   *  Rejects with TypeError if input is invalid.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getRawTransactionByHash (txHash) {\n    if (!isString(txHash)) {\n      throw new TypeError('Transaction hash should be a string')\n    }\n\n    if (!(/^[A-Fa-f0-9]+$/.test(txHash))) {\n      throw new TypeError('Transaction hash should be a valid hex string')\n    }\n\n    const transaction = await this.getMethod('getRawTransactionByHash')(txHash)\n\n    if (!this.validateTransaction(transaction)) {\n      throw new InvalidProviderResponseError('Provider returned an invalid transaction')\n    }\n\n    return transaction\n  }\n\n  /**\n   * Get the balance of an account given its addresses.\n   * @param {!string|string[]|Address|Address[]} addresses - An address or a list of addresses.\n   * @return {Promise<number, InvalidProviderResponseError>} If addresses is given,\n   *  returns the cumulative balance of the given addresses. Otherwise returns the balance\n   *  of the addresses that the signing provider controls.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getBalance (addresses) {\n    if (!isArray(addresses)) {\n      addresses = [ addresses ]\n    }\n\n    const balance = await this.getMethod('getBalance')(addresses)\n\n    if (!isNumber(balance)) {\n      throw new InvalidProviderResponseError('Provider returned an invalid response')\n    }\n\n    return balance\n  }\n\n  /**\n   * Get addresses/accounts of the user.\n   * @return {Promise<Address, InvalidProviderResponseError>} Resolves with a list\n   *  of accounts.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getAddresses (startingIndex = 0, numAddresses = 1) {\n    const addresses = await this.getMethod('getAddresses')(startingIndex, numAddresses)\n\n    if (!isArray(addresses)) {\n      throw new InvalidProviderResponseError('Provider returned an invalid response')\n    }\n\n    return addresses\n  }\n\n  /**\n   * Check if an address has been used or not.\n   * @param {!string|Address} addresses - An address to check for.\n   * @return {Promise<boolean>} Resolves to true if provided address is used\n   */\n  async isAddressUsed (address) {\n    return this.getMethod('isAddressUsed')(address)\n  }\n\n  /**\n   * Get unused address/account of the user.\n   * @return {Promise<string, InvalidProviderResponseError>} Resolves with a address\n   *  object.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async getUnusedAddress (from = {}) {\n    return this.getMethod('getUnusedAddress')(from)\n  }\n\n  /**\n   * Sign a message.\n   * @param {!string} message - Message to be signed.\n   * @param {!string} from - The address from which the message is signed.\n   * @return {Promise<string>} Resolves with a signed message.\n   */\n  async signMessage (message, from) {\n    return this.getMethod('signMessage')(message, from)\n  }\n\n  /**\n   * Create, sign & broadcast a transaction.\n   * @param {!string} to - Recepient address.\n   * @param {!string} value - Value of transaction.\n   * @param {!string} data - Data to be passed to the transaction.\n   * @param {!string} from - The address from which the message is signed.\n   * @return {Promise<string>} Resolves with a signed transaction.\n   */\n  async sendTransaction (to, value, data, from) {\n    return this.getMethod('sendTransaction')(to, value, data, from)\n  }\n\n  /**\n   * Broadcast a signed transaction to the network.\n   * @param {!string} rawTransaction - A raw transaction usually in the form of a\n   *  hexadecimal string that represents the serialized transaction.\n   * @return {Promise<string, InvalidProviderResponseError>} Resolves with an\n   *  identifier for the broadcasted transaction.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async sendRawTransaction (rawTransaction) {\n    const txHash = await this.getMethod('sendRawTransaction')(rawTransaction)\n\n    if (!isString(txHash)) {\n      throw new InvalidProviderResponseError('sendRawTransaction method should return a transaction id string')\n    }\n\n    return txHash\n  }\n\n  /**\n   * Decode Transaction from Hex\n   * @param {!string} rawTransaction - A raw transaction usually in the form of a\n   *  hexadecimal string that represents the serialized transaction.\n   * @return {Promise<string>} Resolves with an\n   *  decoded transaction object.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async decodeRawTransaction (rawTransaction) {\n    return this.getMethod('decoderawtransaction')(rawTransaction)\n  }\n\n  /**\n   * Find swap transaction from parameters\n   * @param {!string} blockNumber - Block number in which transaction was mined\n   * @param {!string} recipientAddress - Recepient address\n   * @param {!string} refundAddress - Refund address\n   * @param {!string} expiration - Expiration time\n   * @return {Promise<string>} Resolves with a transaction identifier.\n   */\n  async getSwapTransaction (blockNumber, recipientAddress, refundAddress, secretHash, expiration) {\n    return this.getMethod('getSwapTransaction')(blockNumber, recipientAddress, refundAddress, secretHash, expiration)\n  }\n\n  /**\n   * Find swap confirmation transaction from parameters\n   * @param {!string} blockNumber - Block number in which transaction was mined\n   * @param {!string} initiationTxHash - Swap initiation transaction hash/identifier\n   * @param {!string} secretHash - Secret hash\n   * @return {Promise<string>} Resolves with a transaction identifier.\n   */\n  async getSwapConfirmTransaction (blockNumber, initiationTxHash, secretHash) {\n    return this.getMethod('getSwapConfirmTransaction')(blockNumber, initiationTxHash, secretHash)\n  }\n\n  /**\n   * Generate a secret.\n   * @param {!string} message - Message to be used for generating secret.\n   * @return {Promise<string>} Resolves with secret\n   */\n  async generateSecret (message) {\n    const unusedAddress = await this.getMethod('getUnusedAddress')()\n    const signedMessage = await this.signMessage(message, unusedAddress)\n    const secret = sha256(signedMessage)\n    return secret\n  }\n\n  /**\n   * Get secret from claim transaction hash.\n   * @param {!string} transaction hash - transaction hash of claim.\n   * @return {Promise<string>} Resolves with secret\n   */\n  async getSecret (claimTxHash) {\n    return this.getMethod('getSecret')(claimTxHash)\n  }\n\n  /**\n   * Initiate a swap\n   * @param {!number} value - The amount of native value to lock for the swap.\n   * @param {!string} recipientAddress - Recepient address for the swap in hex.\n   * @param {!string} refundAddress - Refund address for the swap in hex.\n   * @param {!string} secretHash - Secret hash for the swap in hex.\n   * @param {!number} expiration - Expiration time for the swap.\n   * @return {Promise<string, TypeError>} Resolves with the transaction ID for the swap.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async initiateSwap (value, recipientAddress, refundAddress, secretHash, expiration) {\n    return this.getMethod('initiateSwap')(value, recipientAddress, refundAddress, secretHash, expiration)\n  }\n\n  /**\n   * Create swap script.\n   * @param {!string} bytecode - Bytecode to be used for swap.\n   * @return {Promise<string, null>} Resolves with swap bytecode.\n   */\n  async createSwapScript (recipientAddress, refundAddress, secretHash, expiration) {\n    if (!isString(recipientAddress)) {\n      throw new TypeError('Recipient address should be a string')\n    }\n\n    if (!isString(refundAddress)) {\n      throw new TypeError('Refund address should be a string')\n    }\n\n    if (!isString(secretHash)) {\n      throw new TypeError('Secret hash should be a string')\n    }\n\n    if (!(/^[A-Fa-f0-9]+$/.test(secretHash))) {\n      throw new TypeError('Secret hash should be a valid hex string')\n    }\n\n    if (!isNumber(expiration)) {\n      throw new TypeError('Invalid expiration time')\n    }\n\n    return this.getMethod('createSwapScript')(recipientAddress, refundAddress, secretHash, expiration)\n  }\n\n  /**\n   * Generate redeem swap transaction data\n   * @param {!string} secret - Secret for the swap in hex.\n   * @param {string} [pubKey] - PubKey for the swap in hex.\n   * @param {string} [signature] - Signature for the swap in hex.\n   * @return {Promise<string, TypeError>} Resolves with redeem swap contract bytecode.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async claimSwap (initiationTxHash, recipientAddress, refundAddress, secret, expiration) {\n    if (!(/^[A-Fa-f0-9]+$/.test(initiationTxHash))) {\n      throw new TypeError('Initiation transaction hash should be a valid hex string')\n    }\n\n    return this.getMethod('claimSwap')(initiationTxHash, recipientAddress, refundAddress, secret, expiration)\n  }\n\n  /**\n   * Generate refund swap transaction data\n   * @param {string} [pubKey] - PubKey for the swap in hex.\n   * @param {string} [signature] - Signature for the swap in hex.\n   * @return {Promise<string, TypeError>} Resolves with refund swap contract bytecode.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async refundSwap (pubKey = '', signature = '') {\n    if (!isString(pubKey)) {\n      throw new TypeError('PubKey should be a string')\n    }\n\n    if (!(/^[A-Fa-f0-9]*$/.test(pubKey))) {\n      throw new TypeError('PubKey should be a valid hex string')\n    }\n\n    if (!isString(signature)) {\n      throw new TypeError('Signature should be a string')\n    }\n\n    if (!(/^[A-Fa-f0-9]*$/.test(signature))) {\n      throw new TypeError('Signature should be a valid hex string')\n    }\n\n    return this.getMethod('refundSwap')(pubKey, signature)\n  }\n\n  /**\n   * Check if counterparty transaction has been confirmed\n   * @param {!number} blockNumber - The number of the desired block.\n   * @param {!string} recipientAddress - Recepient address for the swap in hex.\n   * @param {!string} refundAddress - Refund address for the swap in hex.\n   * @param {!string} secretHash - Secret hash for the swap in hex.\n   * @param {!number} expiration - Expiration time for the swap.\n   * @return {Promise<string, TypeError>} Resolves with txHash of desired swap or false if not found.\n   *  Rejects with InvalidProviderResponseError if provider's response is invalid.\n   */\n  async checkBlockSwap (blockNumber, recipientAddress, refundAddress, secretHash, expiration) {\n    return this.getMethod('checkBlockSwap')(blockNumber, recipientAddress, refundAddress, secretHash, expiration)\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/Client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Client",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~Client",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/Client.js",
    "importStyle": "Client",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#constructor",
    "access": "public",
    "description": "Client",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Provider"
        ],
        "spread": false,
        "optional": true,
        "name": "provider",
        "description": "Data source/provider for the instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "version",
        "description": "Minimum blockchain node version to support"
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "validateTransaction",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#validateTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "validateBlock",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#validateBlock",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_providers",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#_providers",
    "access": "private",
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "version",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#version",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "addProvider",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#addProvider",
    "access": "public",
    "description": "Add a provider",
    "lineNumber": 51,
    "params": [
      {
        "nullable": false,
        "types": [
          "string",
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "The provider instance or RPC connection string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Client"
      ],
      "spread": false,
      "description": "Returns instance of Client"
    },
    "throws": [
      {
        "types": [
          "InvalidProviderError"
        ],
        "description": "When invalid provider is provider"
      },
      {
        "types": [
          "DuplicateProviderError"
        ],
        "description": "When same provider is added again"
      }
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getProviderForMethod",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#getProviderForMethod",
    "access": "public",
    "description": "Check the availability of a method.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Name of the method to look for in the provider stack"
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "requestor",
        "description": "If provided, it returns providers only\n above the requestor in the stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": "Returns a provider instance associated with the requested method"
    },
    "throws": [
      {
        "types": [
          "NoProviderError"
        ],
        "description": "When no provider is available in the stack."
      },
      {
        "types": [
          "UnimplementedMethodError"
        ],
        "description": "When the requested method is not provided\n by any provider above requestor in the provider stack"
      },
      {
        "types": [
          "UnsupportedMethodError"
        ],
        "description": "When requested method is not supported by\n version specified"
      }
    ]
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "getMethod",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#getMethod",
    "access": "public",
    "description": "Helper method that returns method from a provider.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Name of the method to look for in the provider stack"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "requestor",
        "description": "If provided, it returns method from providers only\n above the requestor in the stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Returns method from provider instance associated with the requested method"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "generateBlock",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#generateBlock",
    "access": "public",
    "description": "Generate a block",
    "lineNumber": 155,
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numberOfBlocks",
        "description": "Number of blocks to be generated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string[], TypeError|InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves\n with Block hash of the generated blocks.\n Rejects with TypeError if input is invalid.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getBlockByHash",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getBlockByHash",
    "access": "public",
    "description": "Get a block given its hash.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "blockHash",
        "description": "A hexadecimal string that represents the\n *hash* of the desired block."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "includeTx",
        "description": "If true, fetches transaction in the block."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ChainAbstractionLayer.schemas.Block, TypeError|InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with a Block with the same hash as the given input.\n If `includeTx` is true, the transaction property is an array of Transactions;\n otherwise, it is a list of transaction hashes.\n Rejects with TypeError if input is invalid.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "getBlockByNumber",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getBlockByNumber",
    "access": "public",
    "description": "Get a block given its number.",
    "lineNumber": 220,
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "blockNumber",
        "description": "The number of the desired block."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "includeTx",
        "description": "If true, fetches transaction in the block."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ChainAbstractionLayer.schemas.Block, TypeError|InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with a Block with the same number as the given input.\n If `includeTx` is true, the transaction property is an array of Transactions;\n otherwise, it is a list of transaction hashes.\n Rejects with TypeError if input is invalid.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "getBlockHeight",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getBlockHeight",
    "access": "public",
    "description": "Get current block height of the chain.",
    "lineNumber": 247,
    "return": {
      "nullable": null,
      "types": [
        "Promise<number, InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with\n chain height.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    },
    "params": []
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getTransactionByHash",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getTransactionByHash",
    "access": "public",
    "description": "Get a transaction given its hash.",
    "lineNumber": 266,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "txHash",
        "description": "A hexadecimal string that represents the *hash* of the\n desired transaction."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ChainAbstractionLayer.schemas.Transaction, TypeError|InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with a Transaction with the same hash as the given input.\n Rejects with TypeError if input is invalid.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "getRawTransactionByHash",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getRawTransactionByHash",
    "access": "public",
    "description": "Get a raw hexadecimal transaction given its hash.",
    "lineNumber": 296,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "txHash",
        "description": "A hexadecimal string that represents the *hash* of the\n desired transaction."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, TypeError|InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with the raw Transaction with\n the same hash as the given output.\n Rejects with TypeError if input is invalid.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getBalance",
    "access": "public",
    "description": "Get the balance of an account given its addresses.",
    "lineNumber": 322,
    "params": [
      {
        "nullable": false,
        "types": [
          "string",
          "string[]",
          "Address",
          "Address[]"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "An address or a list of addresses."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number, InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "If addresses is given,\n returns the cumulative balance of the given addresses. Otherwise returns the balance\n of the addresses that the signing provider controls.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getAddresses",
    "access": "public",
    "description": "Get addresses/accounts of the user.",
    "lineNumber": 342,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Address, InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with a list\n of accounts.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    },
    "params": [
      {
        "name": "startingIndex",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "numAddresses",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "isAddressUsed",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#isAddressUsed",
    "access": "public",
    "description": "Check if an address has been used or not.",
    "lineNumber": 357,
    "params": [
      {
        "nullable": false,
        "types": [
          "string",
          "Address"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "An address to check for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "Resolves to true if provided address is used"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getUnusedAddress",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getUnusedAddress",
    "access": "public",
    "description": "Get unused address/account of the user.",
    "lineNumber": 367,
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with a address\n object.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    },
    "params": [
      {
        "name": "from",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "signMessage",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#signMessage",
    "access": "public",
    "description": "Sign a message.",
    "lineNumber": 377,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to be signed."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The address from which the message is signed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Resolves with a signed message."
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "sendTransaction",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#sendTransaction",
    "access": "public",
    "description": "Create, sign & broadcast a transaction.",
    "lineNumber": 389,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Recepient address."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value of transaction."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to be passed to the transaction."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The address from which the message is signed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Resolves with a signed transaction."
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "sendRawTransaction",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#sendRawTransaction",
    "access": "public",
    "description": "Broadcast a signed transaction to the network.",
    "lineNumber": 401,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTransaction",
        "description": "A raw transaction usually in the form of a\n hexadecimal string that represents the serialized transaction."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, InvalidProviderResponseError>"
      ],
      "spread": false,
      "description": "Resolves with an\n identifier for the broadcasted transaction.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "decodeRawTransaction",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#decodeRawTransaction",
    "access": "public",
    "description": "Decode Transaction from Hex",
    "lineNumber": 419,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTransaction",
        "description": "A raw transaction usually in the form of a\n hexadecimal string that represents the serialized transaction."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Resolves with an\n decoded transaction object.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getSwapTransaction",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getSwapTransaction",
    "access": "public",
    "description": "Find swap transaction from parameters",
    "lineNumber": 431,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "blockNumber",
        "description": "Block number in which transaction was mined"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "recipientAddress",
        "description": "Recepient address"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "refundAddress",
        "description": "Refund address"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expiration",
        "description": "Expiration time"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Resolves with a transaction identifier."
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getSwapConfirmTransaction",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getSwapConfirmTransaction",
    "access": "public",
    "description": "Find swap confirmation transaction from parameters",
    "lineNumber": 442,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "blockNumber",
        "description": "Block number in which transaction was mined"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "initiationTxHash",
        "description": "Swap initiation transaction hash/identifier"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secretHash",
        "description": "Secret hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Resolves with a transaction identifier."
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "generateSecret",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#generateSecret",
    "access": "public",
    "description": "Generate a secret.",
    "lineNumber": 451,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to be used for generating secret."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Resolves with secret"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getSecret",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#getSecret",
    "access": "public",
    "description": "Get secret from claim transaction hash.",
    "lineNumber": 463,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": "hash - transaction hash of claim."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Resolves with secret"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "initiateSwap",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#initiateSwap",
    "access": "public",
    "description": "Initiate a swap",
    "lineNumber": 477,
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The amount of native value to lock for the swap."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "recipientAddress",
        "description": "Recepient address for the swap in hex."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "refundAddress",
        "description": "Refund address for the swap in hex."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secretHash",
        "description": "Secret hash for the swap in hex."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expiration",
        "description": "Expiration time for the swap."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, TypeError>"
      ],
      "spread": false,
      "description": "Resolves with the transaction ID for the swap.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "createSwapScript",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#createSwapScript",
    "access": "public",
    "description": "Create swap script.",
    "lineNumber": 486,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bytecode",
        "description": "Bytecode to be used for swap."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, null>"
      ],
      "spread": false,
      "description": "Resolves with swap bytecode."
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "claimSwap",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#claimSwap",
    "access": "public",
    "description": "Generate redeem swap transaction data",
    "lineNumber": 518,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "Secret for the swap in hex."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "pubKey",
        "description": "PubKey for the swap in hex."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "signature",
        "description": "Signature for the swap in hex."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, TypeError>"
      ],
      "spread": false,
      "description": "Resolves with redeem swap contract bytecode.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "refundSwap",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#refundSwap",
    "access": "public",
    "description": "Generate refund swap transaction data",
    "lineNumber": 533,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "pubKey",
        "description": "PubKey for the swap in hex."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "signature",
        "description": "Signature for the swap in hex."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, TypeError>"
      ],
      "spread": false,
      "description": "Resolves with refund swap contract bytecode.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "checkBlockSwap",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Client.js~Client#checkBlockSwap",
    "access": "public",
    "description": "Check if counterparty transaction has been confirmed",
    "lineNumber": 563,
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "blockNumber",
        "description": "The number of the desired block."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "recipientAddress",
        "description": "Recepient address for the swap in hex."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "refundAddress",
        "description": "Refund address for the swap in hex."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secretHash",
        "description": "Secret hash for the swap in hex."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expiration",
        "description": "Expiration time for the swap."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, TypeError>"
      ],
      "spread": false,
      "description": "Resolves with txHash of desired swap or false if not found.\n Rejects with InvalidProviderResponseError if provider's response is invalid."
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/DsnParser.js",
    "content": "import DNSParser from 'dsn-parser'\n\nconst SECURE_DRIVER_POSTFIX = '+s'\nconst shouldUseHTTPS = (driver) => driver.endsWith(SECURE_DRIVER_POSTFIX)\nconst getSecureDriverName = (driver) => driver.substring(0, driver.length - SECURE_DRIVER_POSTFIX.length)\n\n/**\n * Secure driver connection postfix and checker\n * Ref - https://tools.ietf.org/html/rfc3986#section-3.1\n */\nexport default (uri) => {\n  const dsn = new DNSParser(uri)\n\n  let {\n    driver,\n    user,\n    password,\n    host,\n    port,\n    params\n  } = dsn.getParts()\n\n  let {\n    timeout,\n    returnHeaders,\n    strictSSL,\n    loggerName,\n    version\n  } = params\n\n  let defaultProtocol = 'http'\n  let defaultPort = 80\n  let driverName = driver\n\n  timeout = timeout ? Number(timeout) : undefined\n  returnHeaders = returnHeaders === 'true'\n  strictSSL = strictSSL === 'true'\n  loggerName = loggerName || driver\n\n  if (shouldUseHTTPS(driver)) {\n    defaultProtocol = 'https'\n    defaultPort = 443\n    driverName = getSecureDriverName(driver)\n  }\n\n  const baseUrl = `${defaultProtocol}://${host}:${port || defaultPort}`\n  const auth = (password || user) && { password: password, username: user }\n\n  return {\n    baseUrl,\n    loggerName,\n    driverName,\n    timeout,\n    returnHeaders,\n    strictSSL,\n    auth,\n    version\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/DsnParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "SECURE_DRIVER_POSTFIX",
    "memberof": "src/DsnParser.js",
    "static": true,
    "longname": "src/DsnParser.js~SECURE_DRIVER_POSTFIX",
    "access": "public",
    "export": false,
    "importPath": "chainabstractionlayer/src/DsnParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "shouldUseHTTPS",
    "memberof": "src/DsnParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DsnParser.js~shouldUseHTTPS",
    "access": "public",
    "export": false,
    "importPath": "chainabstractionlayer/src/DsnParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "driver",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "getSecureDriverName",
    "memberof": "src/DsnParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DsnParser.js~getSecureDriverName",
    "access": "public",
    "export": false,
    "importPath": "chainabstractionlayer/src/DsnParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "driver",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "DsnParser",
    "memberof": "src/DsnParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DsnParser.js~DsnParser",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/DsnParser.js",
    "importStyle": "DsnParser",
    "description": "Secure driver connection postfix and checker\nRef - https://tools.ietf.org/html/rfc3986#section-3.1",
    "lineNumber": 11,
    "params": [
      {
        "name": "uri",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"baseUrl\": *, \"loggerName\": *, \"driverName\": *, \"timeout\": *, \"returnHeaders\": *, \"strictSSL\": *, \"auth\": *, \"version\": *}"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/Provider.js",
    "content": "export default class Provider {\n  /**\n   * Set client to a provider instance.\n   * @param {!ChainAbstractionLayer} client - The ChainAbstractionLayer instance\n   */\n  setClient (client) {\n    this.client = client\n  }\n\n  /**\n   * Get method for the provider\n   * @param {!string} method - Name of the method\n   * @return {function} Returns a method from a provider above current Provider\n   *  in the stack.\n   */\n  getMethod (method) {\n    return this.client.getMethod(method, this).bind(this)\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/Provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "Provider",
    "memberof": "src/Provider.js",
    "static": true,
    "longname": "src/Provider.js~Provider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/Provider.js",
    "importStyle": "Provider",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "setClient",
    "memberof": "src/Provider.js~Provider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Provider.js~Provider#setClient",
    "access": "public",
    "description": "Set client to a provider instance.",
    "lineNumber": 6,
    "params": [
      {
        "nullable": false,
        "types": [
          "ChainAbstractionLayer"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The ChainAbstractionLayer instance"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "client",
    "memberof": "src/Provider.js~Provider",
    "static": false,
    "longname": "src/Provider.js~Provider#client",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getMethod",
    "memberof": "src/Provider.js~Provider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Provider.js~Provider#getMethod",
    "access": "public",
    "description": "Get method for the provider",
    "lineNumber": 16,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Name of the method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Returns a method from a provider above current Provider\n in the stack."
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/crypto.js",
    "content": "import cryptoHash from 'crypto-hashing'\nimport base58 from 'bs58'\nimport bech32 from 'bech32'\n\n/**\n * Ensure message is in buffer format.\n * @param {string} message - any string.\n * @return {string} Returns Buffer of string.\n */\nfunction ensureBuffer (message) {\n  if (typeof message === 'string') {\n    message = Buffer.from(message, 'hex')\n  }\n\n  return message\n}\n\n/**\n * Get hash of a message in hex.\n * @param {!string} algorithm - Hashing algorithm.\n * @param {!string|Buffer} message - Message to be hashed.\n * @return {string} Returns the hash of a string.\n */\nfunction hashToHex (algorithm, message) {\n  return cryptoHash(algorithm, ensureBuffer(message)).toString('hex')\n}\n\n/**\n * Get hash160 of message.\n * @param {!string|Buffer} message - message in string or Buffer.\n * @return {string} Returns the hash160 of a string.\n */\nfunction hash160 (message) {\n  return hashToHex('hash160', message)\n}\n\n/**\n * Get sha256 of message.\n * @param {!string|Buffer} message - message in string or Buffer.\n * @return {string} Returns the sha256 of a string.\n */\nfunction sha256 (message) {\n  return hashToHex('sha256', message)\n}\n\n/**\n * Get ripemd160 of message.\n * @param {!string|Buffer} message - message in string or Buffer.\n * @return {string} Returns the ripemd160 of a string.\n */\nfunction ripemd160 (message) {\n  return hashToHex('ripemd160', message)\n}\n\n/**\n * Pad a hex string with '0'\n * @param {string} hex - The hex string to pad.\n * @param {number} [length] - The length of the final string.\n * @return Returns a padded string with length greater or equal to the given length\n *  rounded up to the nearest even number.\n */\nfunction padHexStart (hex, length) {\n  let len = length || hex.length\n  len += len % 2\n\n  return hex.padStart(len, '0')\n}\n\nexport {\n  /**\n   * Base58 object with decode, decodeUnsafe, and encode functions.\n   */\n  base58,\n\n  /**\n   * Get bech32 of message.\n   * @param {!string} message - any string.\n   * @return {string} Returns the bech32 of a string.\n   */\n  bech32,\n\n  sha256,\n  ripemd160,\n  hash160,\n  ensureBuffer,\n  padHexStart\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/crypto.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "hashToHex",
    "memberof": "src/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.js~hashToHex",
    "access": "public",
    "export": false,
    "importPath": "chainabstractionlayer/src/crypto.js",
    "importStyle": null,
    "description": "Get hash of a message in hex.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "algorithm",
        "description": "Hashing algorithm."
      },
      {
        "nullable": false,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to be hashed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the hash of a string."
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "sha256",
    "memberof": "src/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.js~sha256",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/crypto.js",
    "importStyle": "{sha256}",
    "description": "Get sha256 of message.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": false,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "message in string or Buffer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the sha256 of a string."
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "ripemd160",
    "memberof": "src/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.js~ripemd160",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/crypto.js",
    "importStyle": "{ripemd160}",
    "description": "Get ripemd160 of message.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": false,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "message in string or Buffer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the ripemd160 of a string."
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "hash160",
    "memberof": "src/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.js~hash160",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/crypto.js",
    "importStyle": "{hash160}",
    "description": "Get hash160 of message.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": false,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "message in string or Buffer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the hash160 of a string."
    }
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "ensureBuffer",
    "memberof": "src/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.js~ensureBuffer",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/crypto.js",
    "importStyle": "{ensureBuffer}",
    "description": "Ensure message is in buffer format.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "any string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns Buffer of string."
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "padHexStart",
    "memberof": "src/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.js~padHexStart",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/crypto.js",
    "importStyle": "{padHexStart}",
    "description": "Pad a hex string with '0'",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "The hex string to pad."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "length",
        "description": "The length of the final string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returns a padded string with length greater or equal to the given length\n rounded up to the nearest even number."
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/errors.js",
    "content": "import BaseError from 'standard-error'\n\nfunction createError (name) {\n  class NewError extends BaseError {}\n  NewError.prototype.name = name\n  return NewError\n}\n\nexport const StandardError = createError('StandardError')\nexport const ProviderNotFoundError = createError('ProviderNotFoundError')\nexport const InvalidProviderError = createError('InvalidProviderError')\nexport const DuplicateProviderError = createError('DuplicateProviderError')\nexport const NoProviderError = createError('NoProviderError')\nexport const UnsupportedMethodError = createError('UnsupportedMethodError')\nexport const UnimplementedMethodError = createError('UnimplementedMethodError')\nexport const InvalidProviderResponseError = createError('InvalidProviderResponseError')\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "createError",
    "memberof": "src/errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors.js~createError",
    "access": "public",
    "export": false,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "StandardError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~StandardError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{StandardError}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "ProviderNotFoundError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~ProviderNotFoundError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{ProviderNotFoundError}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "InvalidProviderError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~InvalidProviderError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{InvalidProviderError}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "DuplicateProviderError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~DuplicateProviderError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{DuplicateProviderError}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "NoProviderError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~NoProviderError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{NoProviderError}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "UnsupportedMethodError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~UnsupportedMethodError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{UnsupportedMethodError}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "UnimplementedMethodError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~UnimplementedMethodError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{UnimplementedMethodError}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "InvalidProviderResponseError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~InvalidProviderResponseError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/errors.js",
    "importStyle": "{InvalidProviderResponseError}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Client from './Client'\nimport Provider from './Provider'\nimport networks from './networks'\n\nimport * as providers from './providers'\nimport * as crypto from './crypto'\nimport * as errors from './errors'\nimport * as schema from './schema'\n\nimport JsonRpcProvider from './providers/JsonRpcProvider'\nimport ApiProvider from './providers/ApiProvider'\nimport LedgerProvider from './providers/LedgerProvider'\n\nexport {\n  Client,\n  Provider,\n  networks,\n  providers,\n  crypto,\n  errors,\n  schema,\n  JsonRpcProvider,\n  ApiProvider,\n  LedgerProvider\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/networks.js",
    "content": "export default {\n  bitcoin: {\n    name: 'bitcoin',\n    pubKeyHash: '00',\n    scriptHash: '05',\n    coinType: '0',\n    explorerUrl: 'https://blockchain.info'\n  },\n  bitcoin_testnet: {\n    name: 'bitcoin_testnet',\n    pubKeyHash: '6F',\n    scriptHash: 'C4',\n    coinType: '1',\n    explorerUrl: 'https://testnet.blockchain.info'\n  },\n  litecoin: {\n    name: 'litecoin',\n    pubKeyHash: '30',\n    scriptHash: '32',\n    coinType: '2'\n  },\n  ethereum: {\n    name: 'ethereum',\n    coinType: '60'\n  },\n  ethereum_classic: {\n    name: 'ethereum_classic',\n    coinType: '61'\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/networks.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/providers/ApiProvider.js",
    "content": "import axios from 'axios'\nimport JSONBigInt from 'json-bigint'\nimport Provider from '../Provider'\n\nconst { parse } = JSONBigInt({ storeAsString: true, strict: true })\n\nexport default class ApiProvider extends Provider {\n  constructor (uri, username, password) {\n    super()\n\n    this._axios = axios.create({\n      baseURL: uri,\n      responseType: 'text',\n      transformResponse: undefined, // https://github.com/axios/axios/issues/907,\n      validateStatus: (status) => true\n    })\n\n    if (username || password) {\n      this._axios.defaults.auth = { username, password }\n    }\n  }\n\n  _prepareGetRequest (data) {\n    return data\n  }\n\n  _preparePostRequest (data) {\n    return data\n  }\n\n  _parseGetResponse ({ data, status, statusText, headers }) {\n    // Attempt to parse response\n\n    try {\n      data = parse(data)\n    } catch (e) {}\n\n    return data\n  }\n\n  _parsePostResponse ({ data, status, statusText, headers }) {\n    return this._parseGetResponse({ data, status, statusText, headers })\n  }\n\n  apiGet (uri = '/', data) {\n    return this._axios.get(\n      uri,\n      { params: this._prepareGetRequest(data) }\n    ).then(this._parseGetResponse.bind(this))\n  }\n\n  apiPost (uri = '/', data) {\n    return this._axios.post(\n      uri,\n      this._preparePostRequest(data)\n    ).then(this._parsePostResponse.bind(this))\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/ApiProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "parse",
    "memberof": "src/providers/ApiProvider.js",
    "static": true,
    "longname": "src/providers/ApiProvider.js~parse",
    "access": "public",
    "export": false,
    "importPath": "chainabstractionlayer/src/providers/ApiProvider.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "ApiProvider",
    "memberof": "src/providers/ApiProvider.js",
    "static": true,
    "longname": "src/providers/ApiProvider.js~ApiProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ApiProvider.js",
    "importStyle": "ApiProvider",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Provider.js~Provider"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_axios",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#_axios",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "_prepareGetRequest",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#_prepareGetRequest",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "_preparePostRequest",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#_preparePostRequest",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "_parseGetResponse",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#_parseGetResponse",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"data\": *, \"status\": *, \"statusText\": *, \"headers\": *}"
        ],
        "defaultRaw": {
          "data": null,
          "status": null,
          "statusText": null,
          "headers": null
        },
        "defaultValue": "{\"data\":null,\"status\":null,\"statusText\":null,\"headers\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "_parsePostResponse",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#_parsePostResponse",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"data\": *, \"status\": *, \"statusText\": *, \"headers\": *}"
        ],
        "defaultRaw": {
          "data": null,
          "status": null,
          "statusText": null,
          "headers": null
        },
        "defaultValue": "{\"data\":null,\"status\":null,\"statusText\":null,\"headers\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "apiGet",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#apiGet",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "/",
        "defaultValue": "/"
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "apiPost",
    "memberof": "src/providers/ApiProvider.js~ApiProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ApiProvider.js~ApiProvider#apiPost",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "/",
        "defaultValue": "/"
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/providers/JsonRpcProvider.js",
    "content": "import axios from 'axios'\nimport JSONBigInt from 'json-bigint'\nimport { get, has } from 'lodash'\n\nimport Provider from '../Provider'\nimport RpcError from './RpcError'\n\nconst { parse } = JSONBigInt({ storeAsString: true, strict: true })\n\nexport default class JsonRpcProvider extends Provider {\n  constructor (uri, username, password) {\n    super()\n\n    this._axios = axios.create({\n      baseURL: uri,\n      responseType: 'text',\n      transformResponse: undefined, // https://github.com/axios/axios/issues/907,\n      validateStatus: (status) => true\n    })\n\n    if (username || password) {\n      this._axios.defaults.auth = { username, password }\n    }\n  }\n\n  _prepareRequest (method, params) {\n    const id = Date.now()\n    return { id, method, params }\n  }\n\n  _parseResponse ({ data, status, statusText, headers }) {\n    if (typeof data === 'string' && headers['content-type'] !== 'application/json' && status !== 200) {\n      throw new RpcError(status, statusText, { data })\n    }\n\n    data = parse(data)\n\n    if (data.error != null) {\n      throw new RpcError(\n        get(data, 'error.code', -32603),\n        get(data, 'error.message', 'An error occurred while processing the RPC call')\n      )\n    }\n\n    if (!has(data, 'result')) {\n      throw new RpcError(-32700, 'Missing `result` on the RPC call result')\n    }\n\n    return data.result\n  }\n\n  jsonrpc (method, ...params) {\n    return this._axios.post(\n      '/',\n      this._prepareRequest(method, params)\n    ).then(this._parseResponse)\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/JsonRpcProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "parse",
    "memberof": "src/providers/JsonRpcProvider.js",
    "static": true,
    "longname": "src/providers/JsonRpcProvider.js~parse",
    "access": "public",
    "export": false,
    "importPath": "chainabstractionlayer/src/providers/JsonRpcProvider.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "JsonRpcProvider",
    "memberof": "src/providers/JsonRpcProvider.js",
    "static": true,
    "longname": "src/providers/JsonRpcProvider.js~JsonRpcProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/JsonRpcProvider.js",
    "importStyle": "JsonRpcProvider",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Provider.js~Provider"
    ]
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/JsonRpcProvider.js~JsonRpcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/JsonRpcProvider.js~JsonRpcProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "_axios",
    "memberof": "src/providers/JsonRpcProvider.js~JsonRpcProvider",
    "static": false,
    "longname": "src/providers/JsonRpcProvider.js~JsonRpcProvider#_axios",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "_prepareRequest",
    "memberof": "src/providers/JsonRpcProvider.js~JsonRpcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/JsonRpcProvider.js~JsonRpcProvider#_prepareRequest",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"id\": *, \"method\": *, \"params\": *}"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "_parseResponse",
    "memberof": "src/providers/JsonRpcProvider.js~JsonRpcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/JsonRpcProvider.js~JsonRpcProvider#_parseResponse",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"data\": *, \"status\": *, \"statusText\": *, \"headers\": *}"
        ],
        "defaultRaw": {
          "data": null,
          "status": null,
          "statusText": null,
          "headers": null
        },
        "defaultValue": "{\"data\":null,\"status\":null,\"statusText\":null,\"headers\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "jsonrpc",
    "memberof": "src/providers/JsonRpcProvider.js~JsonRpcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/JsonRpcProvider.js~JsonRpcProvider#jsonrpc",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/providers/LedgerProvider.js",
    "content": "import Provider from '../Provider'\n\nimport Transport from '@ledgerhq/hw-transport-node-hid'\n\nexport default class LedgerProvider extends Provider {\n  static isSupported () {\n    return Transport.isSupported()\n  }\n\n  constructor (App, baseDerivationPath) {\n    super()\n\n    this._App = App\n    this._baseDerivationPath = baseDerivationPath\n  }\n\n  async createTransport () {\n    if (!LedgerProvider.transport) {\n      LedgerProvider.transport = await Transport.create()\n      LedgerProvider.transport.on('disconnect', () => {\n        this._appInstance = null\n        LedgerProvider.transport = null\n      })\n    }\n  }\n\n  async getApp () {\n    await this.createTransport()\n\n    if (!this._appInstance) {\n      this._appInstance = new this._App(LedgerProvider.transport)\n    }\n\n    return this._appInstance\n  }\n\n  getDerivationPathFromIndex (index) {\n    return this._baseDerivationPath + index\n  }\n\n  async getDerivationPathFromAddress (address) {\n    let path = false\n    let index = 0\n\n    while (!path) {\n      const addr = await this.getAddresses(index, 1)\n      if (String(addr) === address) path = this.getDerivationPathFromIndex(index)\n      index++\n    }\n\n    return path\n  }\n\n  async getAddressFromIndex (addressIndex) {\n    const path = this.getDerivationPathFromIndex(addressIndex)\n    return this.getAddressFromDerivationPath(path)\n  }\n\n  async getAddresses (startingIndex = 0, numAddresses = 1) {\n    const addresses = []\n    const lastIndex = startingIndex + numAddresses\n\n    for (let currentIndex = startingIndex; currentIndex < lastIndex; currentIndex++) {\n      const address = await this.getAddressFromIndex(currentIndex)\n      addresses.push(address)\n    }\n\n    return addresses\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/LedgerProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "class",
    "name": "LedgerProvider",
    "memberof": "src/providers/LedgerProvider.js",
    "static": true,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/LedgerProvider.js",
    "importStyle": "LedgerProvider",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Provider.js~Provider"
    ]
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "isSupported",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider.isSupported",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "_App",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#_App",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "_baseDerivationPath",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#_baseDerivationPath",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "createTransport",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#createTransport",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "_appInstance",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#_appInstance",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "getApp",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#getApp",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "getDerivationPathFromIndex",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#getDerivationPathFromIndex",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "getDerivationPathFromAddress",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#getDerivationPathFromAddress",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "getAddressFromIndex",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#getAddressFromIndex",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "addressIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/providers/LedgerProvider.js~LedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/LedgerProvider.js~LedgerProvider#getAddresses",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "startingIndex",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "numAddresses",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/providers/RpcError.js",
    "content": "import { STATUS_CODES } from 'http'\nimport { StandardError } from '../errors'\n\nexport default class RpcError extends StandardError {\n  constructor (code, msg, props = {}) {\n    if (typeof code !== 'number') {\n      throw new TypeError(`Non-numeric HTTP code`)\n    }\n\n    if (typeof msg === 'object' && msg !== null) {\n      props = msg\n      msg = null\n    }\n\n    props.code = code\n\n    super(msg || STATUS_CODES[code], props)\n  }\n\n  get status () {\n    return this.code\n  }\n\n  set status (value) {\n    Object.defineProperty(this, 'status', {\n      configurable: true,\n      enumerable: true,\n      value,\n      writable: true\n    })\n  }\n\n  toString () {\n    return `${this.name}: ${this.code} ${this.message}`\n  }\n}\n\nRpcError.prototype.name = 'RpcError'\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/RpcError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "RpcError",
    "memberof": "src/providers/RpcError.js",
    "static": true,
    "longname": "src/providers/RpcError.js~RpcError",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/RpcError.js",
    "importStyle": "RpcError",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/errors.js~StandardError"
    ]
  },
  {
    "__docId__": 153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/RpcError.js~RpcError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/RpcError.js~RpcError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 154,
    "kind": "get",
    "name": "status",
    "memberof": "src/providers/RpcError.js~RpcError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/RpcError.js~RpcError#status",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "set",
    "name": "status",
    "memberof": "src/providers/RpcError.js~RpcError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/RpcError.js~RpcError#status",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "toString",
    "memberof": "src/providers/RpcError.js~RpcError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/RpcError.js~RpcError#toString",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js",
    "content": "import { forIn } from 'lodash'\n\nimport ApiProvider from '../ApiProvider'\nimport networks from '../../networks'\n\nexport default class BitcoinBlockchainAPIProvider extends ApiProvider {\n  constructor (chain = { network: networks.bitcoin }) {\n    super(chain.network.explorerUrl)\n  }\n\n  async isAddressUsed (address) {\n    address = String(address)\n    let txCount = 0\n\n    const obj = (await this.apiGet('/balance', { active: address, cors: true }))[address]\n\n    if (obj) txCount = obj.n_tx\n\n    return txCount !== 0\n  }\n\n  async getBalance (addresses) {\n    addresses = addresses\n      .map(address => String(address))\n      .join('|')\n\n    let balance = 0\n    const obj = (await this.apiGet('/balance', { active: addresses, cors: true }))\n\n    forIn(obj, (value, key) => {\n      balance += value.final_balance\n    })\n\n    return balance\n  }\n\n  async getUnspentTransactions (address) {\n    return (await this.apiGet('/unspent', { active: address, cors: true })).unspent_outputs || []\n  }\n\n  async getTransactionHex (transactionHash) {\n    return this.apiGet(`/rawtx/${transactionHash}`, { format: 'hex', cors: true })\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/bitcoin/BitcoinBlockchainAPIProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "BitcoinBlockchainAPIProvider",
    "memberof": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js",
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinBlockchainAPIProvider.js",
    "importStyle": "BitcoinBlockchainAPIProvider",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/providers/ApiProvider.js~ApiProvider"
    ]
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "isAddressUsed",
    "memberof": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider#isAddressUsed",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider#getBalance",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "addresses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "getUnspentTransactions",
    "memberof": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider#getUnspentTransactions",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getTransactionHex",
    "memberof": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinBlockchainAPIProvider.js~BitcoinBlockchainAPIProvider#getTransactionHex",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "transactionHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/providers/bitcoin/BitcoinLedgerProvider.js",
    "content": "import LedgerProvider from '../LedgerProvider'\nimport Bitcoin from '@ledgerhq/hw-app-btc'\n\nimport { BigNumber } from 'bignumber.js'\nimport { base58, padHexStart } from '../../crypto'\nimport { pubKeyToAddress, addressToPubKeyHash } from './BitcoinUtil'\nimport Address from '../../Address'\nimport networks from '../../networks'\n\nexport default class BitcoinLedgerProvider extends LedgerProvider {\n  constructor (chain = { network: networks.bitcoin, segwit: true }) {\n    super(Bitcoin, `${chain.segwit ? '49' : '44'}'/${chain.network.coinType}'/0'/0/`)\n    this._network = chain.network\n    this._segwit = chain.segwit\n    this._coinType = chain.network.coinType\n  }\n\n  async getPubKey (from) {\n    const app = await this.getApp()\n    const derivationPath = from.derivationPath ||\n      await this.getDerivationPathFromAddress(from)\n\n    return app.getWalletPublicKey(derivationPath)\n  }\n\n  async getAddressFromDerivationPath (path) {\n    const app = await this.getApp()\n    const { bitcoinAddress } = await app.getWalletPublicKey(path, false, this._segwit)\n    return new Address(bitcoinAddress, path)\n  }\n\n  async signMessage (message, from) {\n    const app = await this.getApp()\n    const derivationPath = from.derivationPath ||\n      await this.getDerivationPathFromAddress(from)\n\n    const hex = Buffer.from(message).toString('hex')\n    return app.signMessageNew(derivationPath, hex)\n  }\n\n  async getUnusedAddress (from = {}) {\n    let addressIndex = from.index || 0\n    let unusedAddress = false\n\n    while (!unusedAddress) {\n      const path = this.getDerivationPathFromIndex(addressIndex)\n      const address = await this.getAddressFromDerivationPath(path)\n      const isUsed = await this.getMethod('isAddressUsed')(address.address)\n\n      if (!isUsed) {\n        unusedAddress = address\n      }\n\n      addressIndex++\n    }\n\n    return unusedAddress\n  }\n\n  getAmountBuffer (amount) {\n    let hexAmount = BigNumber(amount).toString(16)\n    hexAmount = padHexStart(hexAmount, 16)\n    const valueBuffer = Buffer.from(hexAmount, 'hex')\n    return valueBuffer.reverse()\n  }\n\n  async splitTransaction (transactionHex, isSegwitSupported) {\n    const app = await this.getApp()\n\n    return app.splitTransaction(transactionHex, isSegwitSupported)\n  }\n\n  async serializeTransactionOutputs (transactionHex) {\n    const app = await this.getApp()\n\n    return app.serializeTransactionOutputs(transactionHex)\n  }\n\n  async signP2SHTransaction (inputs, associatedKeysets, changePath, outputScriptHex) {\n    const app = await this.getApp()\n\n    return app.signP2SHTransaction(inputs, associatedKeysets, changePath, outputScriptHex)\n  }\n\n  createScript (address) {\n    const type = base58.decode(address).toString('hex').substring(0, 2).toUpperCase()\n    const pubKeyHash = addressToPubKeyHash(address)\n\n    if (type === this._network.pubKeyHash) {\n      return [\n        '76', // OP_DUP\n        'a9', // OP_HASH160\n        '14', // data size to be pushed\n        pubKeyHash, // <PUB_KEY_HASH>\n        '88', // OP_EQUALVERIFY\n        'ac' // OP_CHECKSIG\n      ].join('')\n    } else if (type === this._network.scriptHash) {\n      return [\n        'a9', // OP_HASH160\n        '14', // data size to be pushed\n        pubKeyHash, // <PUB_KEY_HASH>\n        '87' // OP_EQUAL\n      ].join('')\n    } else {\n      throw new Error('Not a valid address:', address)\n    }\n  }\n\n  calculateFee (numInputs, numOutputs, feePerByte) { // TODO: lazy fee estimation\n    return ((numInputs * 148) + (numOutputs * 34) + 10) * feePerByte\n  }\n\n  async getUtxosForAmount (amount, feePerByte = 3, maxAddresses = 20) {\n    const utxosToUse = []\n    let addressIndex = 0\n    let currentAmount = 0\n    let numOutputsOffset = 0\n\n    while ((currentAmount < amount) && maxAddresses > 0) {\n      const path = this.getDerivationPathFromIndex(addressIndex)\n      const address = await this.getAddressFromDerivationPath(path)\n      const utxos = await this.getMethod('getUnspentTransactions')(address.address)\n      const utxosValue = utxos.reduce((acc, utxo) => acc + (utxo.amount * 1e8), 0)\n\n      utxos.forEach((utxo) => {\n        currentAmount += utxosValue\n        utxo.derivationPath = address.derivationPath\n        utxosToUse.push(utxo)\n\n        const fees = this.calculateFee(utxosToUse.length, numOutputsOffset + 1)\n        let totalCost = amount + fees\n\n        if (numOutputsOffset === 0 && currentAmount > totalCost) {\n          numOutputsOffset = 1\n          totalCost -= fees\n          totalCost += this.calculateFee(utxosToUse.length, 2, feePerByte)\n        }\n      })\n\n      addressIndex++\n      maxAddresses--\n    }\n\n    return utxosToUse\n  }\n\n  async getLedgerInputs (unspentOutputs) {\n    const app = await this.getApp()\n\n    return Promise.all(unspentOutputs.map(async utxo => {\n      const hex = await this.getMethod('getTransactionHex')(utxo.txid)\n      const tx = app.splitTransaction(hex, true)\n\n      return [ tx, utxo.vout ]\n    }))\n  }\n\n  async sendTransaction (to, value, data, from) {\n    const app = await this.getApp()\n\n    if (data) {\n      const scriptPubKey = padHexStart(data)\n      to = pubKeyToAddress(scriptPubKey, this._network.name, 'scriptHash')\n    }\n\n    const unusedAddress = await this.getUnusedAddress(from)\n    const unspentOutputsToUse = await this.getUtxosForAmount(value)\n\n    const totalAmount = unspentOutputsToUse.reduce((acc, utxo) => acc + BigNumber(utxo.amount).times(1e8).toNumber(), 0)\n    const fee = this.calculateFee(unspentOutputsToUse.length, 1, 3)\n    let totalCost = value + fee\n    let hasChange = false\n\n    if (totalAmount > totalCost) {\n      hasChange = true\n\n      totalCost -= fee\n      totalCost += this.calculateFee(unspentOutputsToUse.length, 2, 3)\n    }\n\n    if (totalAmount < totalCost) {\n      throw new Error('Not enough balance')\n    }\n\n    const ledgerInputs = await this.getLedgerInputs(unspentOutputsToUse)\n    const paths = unspentOutputsToUse.map(utxo => utxo.derivationPath)\n\n    const sendAmount = value\n    const changeAmount = totalAmount - totalCost\n\n    const sendScript = this.createScript(to)\n\n    let outputs = [{ amount: this.getAmountBuffer(sendAmount), script: Buffer.from(sendScript, 'hex') }]\n\n    if (hasChange) {\n      const changeScript = this.createScript(unusedAddress.address)\n      outputs.push({ amount: this.getAmountBuffer(changeAmount), script: Buffer.from(changeScript, 'hex') })\n    }\n\n    const serializedOutputs = app.serializeTransactionOutputs({ outputs }).toString('hex')\n    const signedTransaction = await app.createPaymentTransactionNew(ledgerInputs, paths, unusedAddress.derivationPath, serializedOutputs)\n\n    return this.getMethod('sendRawTransaction')(signedTransaction)\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/bitcoin/BitcoinLedgerProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "BitcoinLedgerProvider",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js",
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinLedgerProvider.js",
    "importStyle": "BitcoinLedgerProvider",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/providers/LedgerProvider.js~LedgerProvider"
    ]
  },
  {
    "__docId__": 166,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "_network",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#_network",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "_segwit",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#_segwit",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "_coinType",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#_coinType",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getPubKey",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#getPubKey",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "getAddressFromDerivationPath",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#getAddressFromDerivationPath",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "signMessage",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#signMessage",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "getUnusedAddress",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#getUnusedAddress",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "getAmountBuffer",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#getAmountBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "splitTransaction",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#splitTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "transactionHex",
        "types": [
          "*"
        ]
      },
      {
        "name": "isSegwitSupported",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "serializeTransactionOutputs",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#serializeTransactionOutputs",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "transactionHex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "signP2SHTransaction",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#signP2SHTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "inputs",
        "types": [
          "*"
        ]
      },
      {
        "name": "associatedKeysets",
        "types": [
          "*"
        ]
      },
      {
        "name": "changePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "outputScriptHex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "createScript",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#createScript",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "calculateFee",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#calculateFee",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "numInputs",
        "types": [
          "*"
        ]
      },
      {
        "name": "numOutputs",
        "types": [
          "*"
        ]
      },
      {
        "name": "feePerByte",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "getUtxosForAmount",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#getUtxosForAmount",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "feePerByte",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 3,
        "defaultValue": "3"
      },
      {
        "name": "maxAddresses",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 20,
        "defaultValue": "20"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "getLedgerInputs",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#getLedgerInputs",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "unspentOutputs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "sendTransaction",
    "memberof": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinLedgerProvider.js~BitcoinLedgerProvider#sendTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/providers/bitcoin/BitcoinRPCProvider.js",
    "content": "import { flatten } from 'lodash'\nimport JsonRpcProvider from '../JsonRpcProvider'\n\nexport default class BitcoinRPCProvider extends JsonRpcProvider {\n  async decodeRawTransaction (rawTransaction) {\n    const data = await this.jsonrpc('decoderawtransaction', rawTransaction)\n    const { hash: txHash, txid: hash, vout } = data\n    const value = vout.reduce((p, n) => p + parseInt(n.value), 0)\n\n    const output = { hash, value, _raw: { hex: rawTransaction, data, txHash } }\n\n    return output\n  }\n\n  async isAddressUsed (address) {\n    address = String(address)\n    const utxo = await this.getUnspentTransactions(address)\n\n    return utxo.length !== 0\n  }\n\n  async getBalance (addresses) {\n    addresses = addresses\n      .map(address => String(address))\n\n    const _utxos = await this.getUnspentTransactionsForAddresses(addresses)\n    const utxos = flatten(_utxos)\n    return utxos.reduce((acc, utxo) => acc + (utxo.amount * 1e8), 0)\n  }\n\n  async getUnspentTransactionsForAddresses (addresses) {\n    return this.jsonrpc('listunspent', 0, 9999999, addresses)\n  }\n\n  async getUnspentTransactions (address) {\n    return this.jsonrpc('listunspent', 0, 9999999, [ address ])\n  }\n\n  async getTransactionHex (transactionHash) {\n    return (await this.jsonrpc('gettransaction', transactionHash)).hex\n  }\n\n  async generateBlock (numberOfBlocks) {\n    return this.jsonrpc('generate', numberOfBlocks)\n  }\n\n  async getBlockByHash (blockHash, includeTx) {\n    const data = await this.jsonrpc('getblock', blockHash)\n    const {\n      hash,\n      height: number,\n      time: timestamp,\n      difficulty,\n      size,\n      previousblockhash: parentHash,\n      nonce,\n      confirmations\n    } = data\n    let { tx: transactions } = data\n\n    if (includeTx) {\n      const txs = transactions.map(this.getMethod('getRawTransactionByHash'))\n      transactions = await Promise.all(txs)\n    }\n\n    return {\n      hash,\n      number,\n      timestamp,\n      difficulty,\n      size,\n      parentHash,\n      nonce,\n      transactions,\n      confirmations\n    }\n  }\n\n  async getBlockByNumber (blockNumber, includeTx) {\n    return this.getBlockByHash(await this.jsonrpc('getblockhash', blockNumber), includeTx)\n  }\n\n  async getBlockHeight () {\n    return this.jsonrpc('getblockcount')\n  }\n\n  async getTransactionByHash (transactionHash) {\n    const rawTx = await this.getRawTransactionByHash(transactionHash)\n    const tx = await this.decodeRawTransaction(rawTx)\n    try {\n      const data = await this.jsonrpc('gettransaction', transactionHash)\n      const { confirmations } = data\n      const output = Object.assign({}, tx, { confirmations })\n\n      if (confirmations > 0) {\n        const { blockhash: blockHash } = data\n        const { number: blockNumber } = await this.getBlockByHash(blockHash)\n        Object.assign(output, { blockHash, blockNumber })\n      }\n\n      return output\n    } catch (e) {\n      const output = Object.assign({}, tx)\n\n      return output\n    }\n  }\n\n  async getRawTransactionByHash (transactionHash) {\n    return this.jsonrpc('getrawtransaction', transactionHash)\n  }\n\n  async sendRawTransaction (rawTransaction) {\n    return this.jsonrpc('sendrawtransaction', rawTransaction)\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/bitcoin/BitcoinRPCProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "class",
    "name": "BitcoinRPCProvider",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js",
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinRPCProvider.js",
    "importStyle": "BitcoinRPCProvider",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/providers/JsonRpcProvider.js~JsonRpcProvider"
    ]
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "decodeRawTransaction",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#decodeRawTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "rawTransaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "isAddressUsed",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#isAddressUsed",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getBalance",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "addresses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "getUnspentTransactionsForAddresses",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getUnspentTransactionsForAddresses",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "addresses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "getUnspentTransactions",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getUnspentTransactions",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getTransactionHex",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getTransactionHex",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "transactionHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "generateBlock",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#generateBlock",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "numberOfBlocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "getBlockByHash",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getBlockByHash",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "blockHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "includeTx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"hash\": *, \"number\": *, \"timestamp\": *, \"difficulty\": *, \"size\": *, \"parentHash\": *, \"nonce\": *, \"transactions\": *, \"confirmations\": *}"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "getBlockByNumber",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getBlockByNumber",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "blockNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "includeTx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "getBlockHeight",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getBlockHeight",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "getTransactionByHash",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getTransactionByHash",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "transactionHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getRawTransactionByHash",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#getRawTransactionByHash",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "transactionHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "sendRawTransaction",
    "memberof": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinRPCProvider.js~BitcoinRPCProvider#sendRawTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "rawTransaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/providers/bitcoin/BitcoinSwapProvider.js",
    "content": "import Provider from '../../Provider'\nimport { addressToPubKeyHash, compressPubKey, pubKeyToAddress, reverseBuffer } from './BitcoinUtil'\nimport { sha256, padHexStart } from '../../crypto'\nimport networks from '../../networks'\n\nexport default class BitcoinSwapProvider extends Provider {\n  // TODO: have a generate InitSwap and generate RecipSwap\n  //   InitSwap should use checkSequenceVerify instead of checkLockTimeVerify\n\n  constructor (chain = { network: networks.bitcoin }) {\n    super()\n    this._network = chain.network\n  }\n\n  createSwapScript (recipientAddress, refundAddress, secretHash, expiration) {\n    let expirationHex = Buffer.from(padHexStart(expiration.toString(16)), 'hex').reverse()\n\n    expirationHex = expirationHex.slice(0, Math.min(expirationHex.length, 5))\n    expirationHex.writeUInt8(0, expirationHex.length - 1)\n\n    const recipientPubKeyHash = addressToPubKeyHash(recipientAddress)\n    const refundPubKeyHash = addressToPubKeyHash(refundAddress)\n    const expirationPushDataOpcode = padHexStart(expirationHex.length.toString(16))\n    const expirationHexEncoded = expirationHex.toString('hex')\n\n    return [\n      '76', 'a9', // OP_DUP OP_HASH160\n      '72', // OP_2SWAP\n      '63', // OP_IF\n      'a8', // OP_SHA256\n      '20', secretHash, // OP_PUSHDATA(20) {secretHash}\n      '88', // OP_EQUALVERIFY\n      '14', recipientPubKeyHash, // OP_PUSHDATA(20) {recipientPubKeyHash}\n      '67', // OP_ELSE\n      expirationPushDataOpcode, // OP_PUSHDATA({expirationHexLength})\n      expirationHexEncoded, // {expirationHexEncoded}\n      'b1', // OP_CHECKLOCKTIMEVERIFY\n      '6d', // OP_2DROP\n      '14', refundPubKeyHash, // OP_PUSHDATA(20) {refundPubKeyHash}\n      '68', // OP_ENDIF\n      '88', 'ac' // OP_EQUALVERIFY OP_CHECKSIG\n    ].join('')\n  }\n\n  async initiateSwap (value, recipientAddress, refundAddress, secretHash, expiration) {\n    const script = this.createSwapScript(recipientAddress, refundAddress, secretHash, expiration)\n    const scriptPubKey = padHexStart(script)\n    const p2shAddress = pubKeyToAddress(scriptPubKey, this._network.name, 'scriptHash')\n    return this.getMethod('sendTransaction')(p2shAddress, value, script)\n  }\n\n  async claimSwap (initiationTxHash, recipientAddress, refundAddress, secret, expiration) {\n    const secretHash = sha256(secret)\n    const script = this.createSwapScript(recipientAddress, refundAddress, secretHash, expiration)\n    const scriptPubKey = padHexStart(script)\n    const p2shAddress = pubKeyToAddress(scriptPubKey, this._network.name, 'scriptHash')\n    const sendScript = this.getMethod('createScript')(p2shAddress)\n\n    const initiationTxRaw = await this.getMethod('getRawTransactionByHash')(initiationTxHash)\n    const initiationTx = await this.getMethod('splitTransaction')(initiationTxRaw, true)\n    const voutIndex = initiationTx.outputs.findIndex((output) => output.script.toString('hex') === sendScript)\n\n    const txHashLE = Buffer.from(initiationTxHash, 'hex').reverse().toString('hex') // TX HASH IN LITTLE ENDIAN\n    const newTxInput = this.generateSigTxInput(txHashLE, voutIndex, script)\n    const newTx = this.generateRawTx(initiationTx, voutIndex, recipientAddress, newTxInput)\n    const splitNewTx = await this.getMethod('splitTransaction')(newTx, true)\n    const outputScriptObj = await this.getMethod('serializeTransactionOutputs')(splitNewTx)\n    const outputScript = outputScriptObj.toString('hex')\n\n    const signature = await this.getMethod('signP2SHTransaction')(\n      [[initiationTx, 0, script]],\n      [`44'/1'/0'/0/0`],\n      outputScript\n    )\n\n    const pubKeyInfo = await this.getMethod('getPubKey')(recipientAddress)\n    const pubKey = compressPubKey(pubKeyInfo.publicKey)\n    const spendSwap = this._spendSwap(signature[0], pubKey, true, secret)\n    const spendSwapInput = this._spendSwapInput(spendSwap, script)\n    const rawClaimTxInput = this.generateRawTxInput(txHashLE, spendSwapInput)\n    const rawClaimTx = this.generateRawTx(initiationTx, voutIndex, recipientAddress, rawClaimTxInput)\n\n    return this.getMethod('sendRawTransaction')(rawClaimTx)\n  }\n\n  _spendSwap (signature, pubKey, isRedeem, secret) {\n    const redeemEncoded = isRedeem ? '51' : '00' // OP_1 : OP_0\n    const encodedSecret = isRedeem\n      ? [\n        padHexStart((secret.length / 2).toString(16)), // OP_PUSHDATA({secretLength})\n        secret\n      ]\n      : ['00'] // OP_0\n\n    const signatureEncoded = signature + '01'\n    const signaturePushDataOpcode = padHexStart((signatureEncoded.length / 2).toString(16))\n    const pubKeyPushDataOpcode = padHexStart((pubKey.length / 2).toString(16))\n\n    const bytecode = [\n      signaturePushDataOpcode,\n      signatureEncoded,\n      ...encodedSecret,\n      redeemEncoded,\n      pubKeyPushDataOpcode,\n      pubKey\n    ]\n\n    return bytecode.join('')\n  }\n\n  _spendSwapInput (spendSwapBytecode, voutScript) {\n    const bytecode = [\n      spendSwapBytecode,\n      '4c',\n      padHexStart((voutScript.length / 2).toString(16)),\n      voutScript\n    ]\n\n    return bytecode.join('')\n  }\n\n  getRedeemSwapData (secret, pubKey, signature) {\n    return this._spendSwap(signature, pubKey, true, secret)\n  }\n\n  getRefundSwapData (pubKey, signature) {\n    return this._spendSwap(signature, pubKey, false)\n  }\n\n  async getSwapTransaction (blockNumber, recipientAddress, refundAddress, secretHash, expiration) {\n    const data = this.createSwapScript(recipientAddress, refundAddress, secretHash, expiration)\n    const scriptPubKey = padHexStart(data)\n    const receivingAddress = pubKeyToAddress(scriptPubKey, this._network.name, 'scriptHash')\n    const sendScript = this.getMethod('createScript')(receivingAddress)\n\n    const block = await this.getMethod('getBlockByNumber')(blockNumber, true)\n    const transactions = block.transactions\n    const txs = await Promise.all(transactions.map(async transaction => {\n      return this.getMethod('decodeRawTransaction')(transaction)\n    }))\n    const swapTx = txs\n      .map(transaction => transaction._raw.data)\n      .map(transaction => transaction.vout\n        .map(vout => { return { txid: transaction.txid, scriptPubKey: vout.scriptPubKey } }))\n      .reduce((acc, val) => acc.concat(val), [])\n      .find(txKeys => txKeys.scriptPubKey.hex === sendScript)\n    return swapTx ? swapTx.txid : null\n  }\n\n  async getSwapConfirmTransaction (blockNumber, initiationTxHash, secretHash) {\n    const block = await this.getMethod('getBlockByNumber')(blockNumber, true)\n    const transactions = block.transactions\n    const txs = await Promise.all(transactions.map(async transaction => {\n      return this.getMethod('decodeRawTransaction')(transaction)\n    }))\n    const swapTx = txs\n      .reduce((acc, val) => acc.concat({ hash: val.hash, vin: val._raw.data.vin }), [])\n      .map(val => val.vin.map(vin => { return { hash: val.hash, vin: vin } }))\n      .flat()\n      .find(tx => tx.vin.txid === initiationTxHash)\n    return swapTx ? swapTx.hash : null\n  }\n\n  async getSecret (claimTxHash) {\n    const claimTxRaw = await this.getMethod('getRawTransactionByHash')(claimTxHash)\n    const claimTx = await this.getMethod('decodeRawTransaction')(claimTxRaw)\n    const script = Buffer.from(claimTx._raw.data.vin[0].scriptSig.hex, 'hex')\n    const sigLength = script[0]\n    const secretLength = script.slice(sigLength + 1)[0]\n    return script.slice(sigLength + 2, sigLength + secretLength + 2).toString('hex')\n  }\n\n  generateSigTxInput (txHashLE, voutIndex, script) {\n    const inputTxOutput = padHexStart(voutIndex.toString(16), 8)\n    const scriptLength = padHexStart((script.length / 2).toString(16))\n\n    return [\n      '01', // NUM INPUTS\n      txHashLE,\n      inputTxOutput, // INPUT TRANSACTION OUTPUT\n      scriptLength,\n      script,\n      'ffffffff' // SEQUENCE\n    ].join('')\n  }\n\n  generateRawTxInput (txHashLE, script) {\n    const scriptLength = padHexStart((script.length / 2).toString(16))\n\n    return [\n      '01', // NUM INPUTS\n      txHashLE,\n      '00000000',\n      scriptLength,\n      script,\n      'ffffffff' // SEQUENCE\n    ].join('')\n  }\n\n  generateRawTx (initiationTx, voutIndex, address, input) {\n    const output = initiationTx.outputs[voutIndex]\n    const value = parseInt(reverseBuffer(output.amount).toString('hex'), 16)\n    const fee = this.getMethod('calculateFee')(1, 1, 3)\n    const amount = value - fee\n    const amountLE = Buffer.from(padHexStart(amount.toString(16), 16), 'hex').reverse().toString('hex') // amount in little endian\n    const pubKeyHash = addressToPubKeyHash(address)\n\n    return [\n      '01000000', // VERSION\n\n      input,\n\n      '01', // NUM OUTPUTS\n      amountLE,\n      '19', // data size to be pushed\n      '76', // OP_DUP\n      'a9', // OP_HASH160\n      '14', // data size to be pushed\n      pubKeyHash, // <PUB_KEY_HASH>\n      '88', // OP_EQUALVERIFY\n      'ac', // OP_CHECKSIG\n\n      '00000000' // OUTPUTS\n    ].join('')\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/bitcoin/BitcoinSwapProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "BitcoinSwapProvider",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js",
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinSwapProvider.js",
    "importStyle": "BitcoinSwapProvider",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Provider.js~Provider"
    ]
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_network",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#_network",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "createSwapScript",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#createSwapScript",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "initiateSwap",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#initiateSwap",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "claimSwap",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#claimSwap",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "initiationTxHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secret",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_spendSwap",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#_spendSwap",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "signature",
        "types": [
          "*"
        ]
      },
      {
        "name": "pubKey",
        "types": [
          "*"
        ]
      },
      {
        "name": "isRedeem",
        "types": [
          "*"
        ]
      },
      {
        "name": "secret",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "_spendSwapInput",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#_spendSwapInput",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "spendSwapBytecode",
        "types": [
          "*"
        ]
      },
      {
        "name": "voutScript",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "getRedeemSwapData",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#getRedeemSwapData",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "secret",
        "types": [
          "*"
        ]
      },
      {
        "name": "pubKey",
        "types": [
          "*"
        ]
      },
      {
        "name": "signature",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "getRefundSwapData",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#getRefundSwapData",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "pubKey",
        "types": [
          "*"
        ]
      },
      {
        "name": "signature",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "getSwapTransaction",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#getSwapTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "blockNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "getSwapConfirmTransaction",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#getSwapConfirmTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "blockNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "initiationTxHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "getSecret",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#getSecret",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "claimTxHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "generateSigTxInput",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#generateSigTxInput",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "txHashLE",
        "types": [
          "*"
        ]
      },
      {
        "name": "voutIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "script",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "generateRawTxInput",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#generateRawTxInput",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "txHashLE",
        "types": [
          "*"
        ]
      },
      {
        "name": "script",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "generateRawTx",
    "memberof": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/bitcoin/BitcoinSwapProvider.js~BitcoinSwapProvider#generateRawTx",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "initiationTx",
        "types": [
          "*"
        ]
      },
      {
        "name": "voutIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "address",
        "types": [
          "*"
        ]
      },
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/providers/bitcoin/BitcoinUtil.js",
    "content": "import {\n  ensureBuffer,\n  hash160,\n  sha256,\n  base58\n} from '../../crypto'\nimport networks from '../../networks'\n\n/**\n * Get compressed pubKey from pubKey.\n * @param {!string} pubKey - 65 byte string with prefix, x, y.\n * @return {string} Returns the compressed pubKey of uncompressed pubKey.\n */\nfunction compressPubKey (pubKey) {\n  const x = pubKey.substring(2, 66)\n  const y = pubKey.substring(66, 130)\n  let prefix\n  const even = parseInt(y.substring(62, 64), 16) % 2 === 0\n  even ? prefix = '02' : prefix = '03'\n  return prefix + x\n}\n\n/**\n * Get address from pubKey.\n * @param {!string|Buffer} pubKey - 65 byte uncompressed pubKey or 33 byte compressed pubKey.\n * @param {!string} network - bitcoin, testnet, or litecoin.\n * @param {!string} type - pubKeyHash or scriptHash.\n * @return {string} Returns the address of pubKey.\n */\nfunction pubKeyToAddress (pubKey, network, type) {\n  pubKey = ensureBuffer(pubKey)\n  const pubKeyHash = hash160(pubKey)\n  const addr = pubKeyHashToAddress(pubKeyHash, network, type)\n  return addr\n}\n\n/**\n * Get address from pubKeyHash.\n * @param {!string} pubKeyHash - hash160 of pubKey.\n * @param {!string} network - bitcoin, testnet, or litecoin.\n * @param {!string} type - pubKeyHash or scriptHash.\n * @return {string} Returns the address derived from pubKeyHash.\n */\nfunction pubKeyHashToAddress (pubKeyHash, network, type) {\n  pubKeyHash = ensureBuffer(pubKeyHash)\n  const prefixHash = Buffer.concat([Buffer.from(networks[network][type], 'hex'), pubKeyHash])\n  const checksum = Buffer.from(sha256(sha256(prefixHash)).slice(0, 8), 'hex')\n  const addr = base58.encode(Buffer.concat([prefixHash, checksum]).slice(0, 25))\n  return addr\n}\n\n/**\n * Get pubKeyHash from address.\n * @param {!string} address - bitcoin base58 encoded address.\n * @return {string} Returns the pubKeyHash of bitcoin address.\n */\nfunction addressToPubKeyHash (address) {\n  return base58.decode(address).toString('hex').substring(2, 42)\n}\n\nfunction reverseBuffer (src) {\n  let buffer = Buffer.alloc(src.length)\n\n  for (let i = 0, j = src.length - 1; i <= j; ++i, --j) {\n    buffer[i] = src[j]\n    buffer[j] = src[i]\n  }\n\n  return buffer\n}\n\nexport {\n  compressPubKey,\n  pubKeyToAddress,\n  pubKeyHashToAddress,\n  addressToPubKeyHash,\n  reverseBuffer\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/bitcoin/BitcoinUtil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "compressPubKey",
    "memberof": "src/providers/bitcoin/BitcoinUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinUtil.js~compressPubKey",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinUtil.js",
    "importStyle": "{compressPubKey}",
    "description": "Get compressed pubKey from pubKey.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pubKey",
        "description": "65 byte string with prefix, x, y."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the compressed pubKey of uncompressed pubKey."
    }
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "pubKeyToAddress",
    "memberof": "src/providers/bitcoin/BitcoinUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinUtil.js~pubKeyToAddress",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinUtil.js",
    "importStyle": "{pubKeyToAddress}",
    "description": "Get address from pubKey.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": false,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "pubKey",
        "description": "65 byte uncompressed pubKey or 33 byte compressed pubKey."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "network",
        "description": "bitcoin, testnet, or litecoin."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "pubKeyHash or scriptHash."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the address of pubKey."
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "pubKeyHashToAddress",
    "memberof": "src/providers/bitcoin/BitcoinUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinUtil.js~pubKeyHashToAddress",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinUtil.js",
    "importStyle": "{pubKeyHashToAddress}",
    "description": "Get address from pubKeyHash.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pubKeyHash",
        "description": "hash160 of pubKey."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "network",
        "description": "bitcoin, testnet, or litecoin."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "pubKeyHash or scriptHash."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the address derived from pubKeyHash."
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "addressToPubKeyHash",
    "memberof": "src/providers/bitcoin/BitcoinUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinUtil.js~addressToPubKeyHash",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinUtil.js",
    "importStyle": "{addressToPubKeyHash}",
    "description": "Get pubKeyHash from address.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "bitcoin base58 encoded address."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the pubKeyHash of bitcoin address."
    }
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "reverseBuffer",
    "memberof": "src/providers/bitcoin/BitcoinUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/bitcoin/BitcoinUtil.js~reverseBuffer",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/bitcoin/BitcoinUtil.js",
    "importStyle": "{reverseBuffer}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/providers/bitcoin/index.js",
    "content": "import BitcoinRPCProvider from './BitcoinRPCProvider'\nimport BitcoinLedgerProvider from './BitcoinLedgerProvider'\nimport BitcoinBlockchainAPIProvider from './BitcoinBlockchainAPIProvider'\nimport BitcoinSwapProvider from './BitcoinSwapProvider'\nimport * as BitcoinUtil from './BitcoinUtil'\n\nexport {\n  BitcoinRPCProvider,\n  BitcoinLedgerProvider,\n  BitcoinBlockchainAPIProvider,\n  BitcoinSwapProvider,\n  BitcoinUtil\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/bitcoin/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "src/providers/ethereum/EthereumLedgerProvider.js",
    "content": "import Ethereum from '@ledgerhq/hw-app-eth'\n\nimport LedgerProvider from '../LedgerProvider'\nimport networks from '../../networks'\nimport Address from '../../Address'\n\nexport default class EthereumLedgerProvider extends LedgerProvider {\n  constructor (chain = { network: networks.ethereum }) {\n    super(Ethereum, `44'/${chain.network.coinType}'/0'/0/`)\n  }\n\n  async getAddressFromDerivationPath (path) {\n    const app = await this.getApp()\n    const { address } = await app.getAddress(path)\n    return new Address(address, path)\n  }\n\n  async signMessage (message, from) {\n    const app = await this.getApp()\n    const derivationPath = from.derivationPath ||\n      await this.getDerivationPathFromAddress(from)\n\n    const hex = Buffer.from(message).toString('hex')\n    return app.signPersonalMessage(derivationPath, hex)\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/ethereum/EthereumLedgerProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "class",
    "name": "EthereumLedgerProvider",
    "memberof": "src/providers/ethereum/EthereumLedgerProvider.js",
    "static": true,
    "longname": "src/providers/ethereum/EthereumLedgerProvider.js~EthereumLedgerProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ethereum/EthereumLedgerProvider.js",
    "importStyle": "EthereumLedgerProvider",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/providers/LedgerProvider.js~LedgerProvider"
    ]
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/ethereum/EthereumLedgerProvider.js~EthereumLedgerProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ethereum/EthereumLedgerProvider.js~EthereumLedgerProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "getAddressFromDerivationPath",
    "memberof": "src/providers/ethereum/EthereumLedgerProvider.js~EthereumLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumLedgerProvider.js~EthereumLedgerProvider#getAddressFromDerivationPath",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "signMessage",
    "memberof": "src/providers/ethereum/EthereumLedgerProvider.js~EthereumLedgerProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumLedgerProvider.js~EthereumLedgerProvider#signMessage",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/providers/ethereum/EthereumMetaMaskProvider.js",
    "content": "import Provider from '../../Provider'\n\nimport { isFunction } from 'lodash'\nimport { formatEthResponse, ensureHexEthFormat, ensureHexStandardFormat } from './EthereumUtil'\nimport { BigNumber } from 'bignumber.js'\n\nexport default class EthereumMetaMaskProvider extends Provider {\n  constructor (metamaskProvider) {\n    super()\n    if (!isFunction(metamaskProvider.sendAsync)) {\n      throw new Error('Invalid MetaMask Provider')\n    }\n\n    this._metamaskProvider = metamaskProvider\n  }\n\n  _toMM (method, ...params) {\n    return new Promise((resolve, reject) => {\n      this\n        ._metamaskProvider\n        .sendAsync({ method, params }, (err, data) => {\n          if (err) {\n            reject(err)\n            return\n          }\n\n          if (!data) {\n            reject(new Error('Something went wrong'))\n            return\n          }\n\n          if (!data.result) {\n            reject(new Error('Something went wrong'))\n            return\n          }\n\n          const formattedResult = formatEthResponse(data.result)\n\n          resolve(formattedResult)\n        })\n    })\n  }\n\n  async getAddresses () {\n    const addresses = await this._toMM('eth_accounts')\n\n    return addresses.map((address) => { return { address: address } })\n  }\n\n  async getUsedAddresses (startingIndex, numAddresses) {\n    return this.getAddresses()\n  }\n\n  async getUnusedAddress () {\n    const addresses = await this.getAddresses()\n    return addresses[0]\n  }\n\n  async signMessage (message) {\n    const hex = Buffer.from(message).toString('hex')\n\n    const addresses = await this.getAddresses()\n    const address = addresses[0].address\n\n    return this._toMM('personal_sign', `0x${hex}`, `0x${address}`)\n  }\n\n  async sendTransaction (to, value, data, from = null) {\n    if (to != null) {\n      to = ensureHexEthFormat(to)\n    }\n\n    if (from == null) {\n      const addresses = await this.getAddresses()\n      from = ensureHexEthFormat(addresses[0].address)\n    }\n\n    value = BigNumber(value).toString(16)\n\n    const tx = {\n      from: ensureHexEthFormat(from),\n      to,\n      value: ensureHexEthFormat(value),\n      data: ensureHexEthFormat(data)\n    }\n\n    const txHash = await this._toMM('eth_sendTransaction', tx)\n    return ensureHexStandardFormat(txHash)\n  }\n\n  async getBlockByNumber (blockNumber, includeTx) {\n    return this._toMM('eth_getBlockByNumber', '0x' + blockNumber.toString(16), includeTx)\n  }\n\n  async getTransactionByHash (txHash) {\n    txHash = ensureHexEthFormat(txHash)\n    return this._toMM('eth_getTransactionByHash', txHash)\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/ethereum/EthereumMetaMaskProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "EthereumMetaMaskProvider",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js",
    "static": true,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ethereum/EthereumMetaMaskProvider.js",
    "importStyle": "EthereumMetaMaskProvider",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Provider.js~Provider"
    ]
  },
  {
    "__docId__": 229,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_metamaskProvider",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#_metamaskProvider",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "_toMM",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#_toMM",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#getAddresses",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "getUsedAddresses",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#getUsedAddresses",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "startingIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "numAddresses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "getUnusedAddress",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#getUnusedAddress",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "signMessage",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#signMessage",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "sendTransaction",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#sendTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "getBlockByNumber",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#getBlockByNumber",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "blockNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "includeTx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "getTransactionByHash",
    "memberof": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumMetaMaskProvider.js~EthereumMetaMaskProvider#getTransactionByHash",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "file",
    "name": "src/providers/ethereum/EthereumRPCProvider.js",
    "content": "import JsonRpcProvider from '../JsonRpcProvider'\n\nimport { formatEthResponse, ensureHexEthFormat } from './EthereumUtil'\n\nexport default class EthereumRPCProvider extends JsonRpcProvider {\n  _parseResponse (response) {\n    const data = super._parseResponse(response)\n\n    return formatEthResponse(data)\n  }\n\n  async getAddresses () {\n    return this.jsonrpc('eth_accounts')\n  }\n\n  async generateBlock (numberOfBlocks) {\n    // Q: throw or silently pass?\n    throw new Error('This method isn\\'t supported by Ethereum')\n  }\n\n  async getBlockByNumber (blockNumber, includeTx) {\n    return this.jsonrpc('eth_getBlockByNumber', blockNumber, includeTx)\n  }\n\n  async getBlockHeight () {\n    const hexHeight = await this.jsonrpc('eth_blockNumber')\n    return parseInt(hexHeight, '16')\n  }\n\n  async getTransactionByHash (txHash) {\n    txHash = ensureHexEthFormat(txHash)\n    return this.jsonrpc('eth_getTransactionByHash', txHash)\n  }\n\n  async getTransactionReceipt (txHash) {\n    txHash = ensureHexEthFormat(txHash)\n    return this.jsonrpc('eth_getTransactionReceipt', txHash)\n  }\n\n  async getBalance (addresses) {\n    addresses = addresses\n      .map(address => String(address))\n\n    const addrs = addresses.map(ensureHexEthFormat)\n    const promiseBalances = await Promise.all(addrs.map(address => this.jsonrpc('eth_getBalance', address, 'latest')))\n    return promiseBalances.map(balance => parseInt(balance, 16))\n      .reduce((acc, balance) => acc + balance, 0)\n  }\n\n  async isAddressUsed (address) {\n    address = String(address)\n\n    const transactionCount = this.jsonrpc('getTransactionCount', address)\n\n    return transactionCount > 0\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/ethereum/EthereumRPCProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "class",
    "name": "EthereumRPCProvider",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js",
    "static": true,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ethereum/EthereumRPCProvider.js",
    "importStyle": "EthereumRPCProvider",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/providers/JsonRpcProvider.js~JsonRpcProvider"
    ]
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "_parseResponse",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#_parseResponse",
    "access": "private",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#getAddresses",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "generateBlock",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#generateBlock",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "numberOfBlocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getBlockByNumber",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#getBlockByNumber",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "blockNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "includeTx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "getBlockHeight",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#getBlockHeight",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "getTransactionByHash",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#getTransactionByHash",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "getTransactionReceipt",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#getTransactionReceipt",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#getBalance",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "addresses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "isAddressUsed",
    "memberof": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumRPCProvider.js~EthereumRPCProvider#isAddressUsed",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "src/providers/ethereum/EthereumSwapProvider.js",
    "content": "import Provider from '../../Provider'\nimport { padHexStart } from '../../crypto'\nimport { ensureHexStandardFormat } from './EthereumUtil'\n\nexport default class EthereumSwapProvider extends Provider {\n  createSwapScript (recipientAddress, refundAddress, secretHash, expiration) {\n    const dataSizeBase = 112\n    const redeemDestinationBase = 66\n    const refundDestinationBase = 89\n    const expirationHex = expiration.toString(16)\n    const expirationEncoded = padHexStart(expirationHex) // Pad with 0\n    const expirationSize = expirationEncoded.length / 2\n    const expirationPushOpcode = (0x60 - 1 + expirationSize).toString(16)\n    const redeemDestinationEncoded = (redeemDestinationBase + expirationSize).toString(16)\n    const refundDestinationEncoded = (refundDestinationBase + expirationSize).toString(16)\n    const dataSizeEncoded = (dataSizeBase + expirationSize).toString(16)\n\n    return [\n      // Constructor\n      '60', dataSizeEncoded, // PUSH1 {dataSizeEncoded}\n      '80', // DUP1\n      '60', '0b', // PUSH1 0b\n      '60', '00', // PUSH1 00\n      '39', // CODECOPY\n      '60', '00', // PUSH1 00\n      'f3', // RETURN\n\n      // Contract\n      '60', '20', // PUSH1 20\n\n      // Get secret\n      '80', // DUP1\n      '60', '00', // PUSH1 00\n      '80', // DUP1\n      '37', // CALLDATACOPY\n\n      // SHA256\n      '60', '21', // PUSH1 21\n      '81', // DUP2\n      '60', '00', // PUSH1 00\n      '80', // DUP1\n      '60', '02', // PUSH1 02\n      '60', '48', // PUSH1 48\n      'f1', // CALL\n\n      // Validate with secretHash\n      '7f', secretHash, // PUSH32 {secretHashEncoded}\n      '60', '21', // PUSH1 21\n      '51', // MLOAD\n      '14', // EQ\n      '16', // AND (to make sure CALL succeeded)\n      // Redeem if secret is valid\n      '60', redeemDestinationEncoded, // PUSH1 {redeemDestinationEncoded}\n      '57', // JUMPI\n\n      // Check time lock\n      expirationPushOpcode, // PUSH{expirationSize}\n      expirationEncoded, // {expirationEncoded}\n      '42', // TIMESTAMP\n      '11', // GT\n      // Refund if timelock passed\n      '60', refundDestinationEncoded, // PUSH1 {refundDestinationEncoded}\n      '57',\n\n      '00', // STOP\n\n      '5b', // JUMPDEST\n      '73', ensureHexStandardFormat(recipientAddress), // PUSH20 {recipientAddressEncoded}\n      'ff', // SUICIDE\n\n      '5b', // JUMPDEST\n      '73', ensureHexStandardFormat(refundAddress), // PUSH20 {refundAddressEncoded}\n      'ff' // SUICIDE\n    ].join('')\n  }\n\n  async initiateSwap (value, recipientAddress, refundAddress, secretHash, expiration) {\n    const bytecode = this.createSwapScript(recipientAddress, refundAddress, secretHash, expiration)\n    return this.getMethod('sendTransaction')(null, value, bytecode)\n  }\n\n  async claimSwap (initiationTxHash, recipientAddress, refundAddress, secret, expiration) {\n    const initiationTransaction = await this.getMethod('getTransactionReceipt')(initiationTxHash)\n    const data = this.getRedeemSwapData(secret)\n    return this.getMethod('sendTransaction')(initiationTransaction.contractAddress, 0, data)\n  }\n\n  getRedeemSwapData (secret) {\n    return padHexStart(secret, 64)\n  }\n\n  getRefundSwapData () {\n    return ''\n  }\n\n  async getSwapTransaction (blockNumber, recipientAddress, refundAddress, secretHash, expiration) {\n    const data = this.createSwapScript(recipientAddress, refundAddress, secretHash, expiration)\n    const block = await this.getMethod('getBlockByNumber')(blockNumber)\n    const txids = block.transactions\n    const transactions = await Promise.all(txids.map(async txid => {\n      return this.getMethod('getTransactionByHash')(txid)\n    }))\n    const swapTx = transactions.find(transaction => transaction.input === data.toLowerCase())\n    return swapTx ? swapTx.hash : null\n  }\n\n  async getSwapConfirmTransaction (blockNumber, initiationTxHash, secretHash) {\n    const initiationTransaction = await this.getMethod('getTransactionReceipt')(initiationTxHash)\n    const block = await this.getMethod('getBlockByNumber')(blockNumber)\n    const txids = block.transactions\n    const transactions = await Promise.all(txids.map(async txid => {\n      return this.getMethod('getTransactionByHash')(txid)\n    }))\n    const swapTx = transactions.find(transaction => transaction.to === initiationTransaction.contractAddress)\n    return swapTx ? swapTx.hash : null\n  }\n\n  async getSecret (claimTxHash) {\n    const claimTransaction = await this.getMethod('getTransactionHash')(claimTxHash)\n    return claimTransaction.input\n  }\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/ethereum/EthereumSwapProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "class",
    "name": "EthereumSwapProvider",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js",
    "static": true,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ethereum/EthereumSwapProvider.js",
    "importStyle": "EthereumSwapProvider",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Provider.js~Provider"
    ]
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "createSwapScript",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#createSwapScript",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "initiateSwap",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#initiateSwap",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "claimSwap",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#claimSwap",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "initiationTxHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secret",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "getRedeemSwapData",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#getRedeemSwapData",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "secret",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "getRefundSwapData",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#getRefundSwapData",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "getSwapTransaction",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#getSwapTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "blockNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "recipientAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "refundAddress",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "expiration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "getSwapConfirmTransaction",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#getSwapConfirmTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "blockNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "initiationTxHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "secretHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "getSecret",
    "memberof": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/providers/ethereum/EthereumSwapProvider.js~EthereumSwapProvider#getSecret",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "claimTxHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "src/providers/ethereum/EthereumUtil.js",
    "content": "import { Block, Transaction } from '../../schema'\n\n/**\n * Converts a hex string to the ethereum format\n * @param {*} hash\n */\nfunction ensureHexEthFormat (hash) {\n  return hash.startsWith('0x') ? hash : '0x' + hash\n}\n\n/**\n * Converts an ethereum hex string to the standard format\n * @param {*} hash\n */\nfunction ensureHexStandardFormat (hash) {\n  return hash.replace('0x', '')\n}\n\nfunction formatEthResponse (obj) {\n  if (typeof obj === 'string' || obj instanceof String) {\n    obj = ensureHexStandardFormat(obj)\n  } else if (Array.isArray(obj) && typeof obj[0] === 'object') {\n    for (let i = 0; i < obj.length; i++) {\n      obj[i] = formatEthResponse(obj[i])\n    }\n  } else if (Array.isArray(obj)) {\n    obj = obj.map(ensureHexStandardFormat)\n  } else {\n    for (let key in obj) {\n      if (Array.isArray(obj[key])) {\n        obj[key] = formatEthResponse(obj[key])\n      } else {\n        if ((Block.properties[key] &&\n          Block.properties[key].type === 'number') ||\n          (Transaction.properties[key] &&\n          Transaction.properties[key].type === 'number')) {\n          obj[key] = parseInt(obj[key])\n        } else {\n          if (obj[key]) {\n            obj[key] = ensureHexStandardFormat(obj[key])\n          }\n        }\n      }\n    }\n  }\n  return obj\n}\n\nexport {ensureHexEthFormat, ensureHexStandardFormat, formatEthResponse}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/ethereum/EthereumUtil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "ensureHexEthFormat",
    "memberof": "src/providers/ethereum/EthereumUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/ethereum/EthereumUtil.js~ensureHexEthFormat",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ethereum/EthereumUtil.js",
    "importStyle": "{ensureHexEthFormat}",
    "description": "Converts a hex string to the ethereum format",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "ensureHexStandardFormat",
    "memberof": "src/providers/ethereum/EthereumUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/ethereum/EthereumUtil.js~ensureHexStandardFormat",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ethereum/EthereumUtil.js",
    "importStyle": "{ensureHexStandardFormat}",
    "description": "Converts an ethereum hex string to the standard format",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "formatEthResponse",
    "memberof": "src/providers/ethereum/EthereumUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/providers/ethereum/EthereumUtil.js~formatEthResponse",
    "access": "public",
    "export": true,
    "importPath": "chainabstractionlayer/src/providers/ethereum/EthereumUtil.js",
    "importStyle": "{formatEthResponse}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "src/providers/ethereum/index.js",
    "content": "import EthereumRPCProvider from './EthereumRPCProvider'\nimport EthereumLedgerProvider from './EthereumLedgerProvider'\nimport EthereumMetaMaskProvider from './EthereumMetaMaskProvider'\nimport EthereumSwapProvider from './EthereumSwapProvider'\n\nexport {\n  EthereumRPCProvider,\n  EthereumLedgerProvider,\n  EthereumMetaMaskProvider,\n  EthereumSwapProvider\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/ethereum/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "src/providers/index.js",
    "content": "import * as bitcoin from './bitcoin'\nimport * as ethereum from './ethereum'\n\nexport {\n  bitcoin,\n  ethereum\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/providers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/schema/index.js",
    "content": "import Block from './Block.json'\nimport Transaction from './Transaction.json'\n\nexport {\n  Block,\n  Transaction\n}\n",
    "static": true,
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/src/schema/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Chain Abstraction Layer <img align=\"right\" src=\"./liquality-logo.png\" height=\"80px\" />\n\n[![ChainAbstractionLayer](https://travis-ci.org/liquality/chainabstractionlayer.svg?branch=master)](https://travis-ci.org/liquality/chainabstractionlayer)\n[![Standard Code Style](https://img.shields.io/badge/codestyle-standard-brightgreen.svg)](https://github.com/standard/standard)\n[![MIT License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](./LICENSE.md)\n[![ChainAbstractionLayer](https://img.shields.io/npm/dt/chainabstractionlayer.svg)](https://npmjs.com/package/chainabstractionlayer)\n\n> :warning: This project is under heavy development. Expect bugs & breaking changes.\n\nQuery different blockchains with a single and simple interface.\n\n\n## Installation\n\n```bash\nnpm install chainabstractionlayer\n```\n\n\n## Usage\n\n```javascript\nimport { Client, providers } from 'chainabstractionlayer'\n\nconst { BitcoinRPCProvider } = providers.bitcoin\n\nconst bitcoin = new Client()\nbitcoin.addProvider(new BitcoinRPCProvider('http://localhost:8080', 'bitcoin', 'local321'))\n\nbitcoin\n  .generateBlock(1) // returns Promise\n  .then(console.log) // Array<BlockHash>\n```\n\n\n### Try ChainAbstractionLayer in Browser\n\n<table>\n  <thead>\n    <tr>\n      <th>Chain</th>\n      <th>Wallet Provider</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=2>Ethereum</td>\n      <td>Ledger</td>\n      <td>\n        <a href=\"./examples/browser/ethereum/ledger.html\">Source</a>\n        &amp;\n        <a href=\"https://liquality.github.io/chainabstractionlayer/examples/browser/ethereum/ledger.html\">Demo</a>\n      </td>\n    </tr>\n    <tr>\n      <td>MetaMask</td>\n      <td>\n        <a href=\"./examples/browser/ethereum/metamask.html\">Source</a>\n        &amp;\n        <a href=\"https://liquality.github.io/chainabstractionlayer/examples/browser/ethereum/metamask.html\">Demo</a>\n      </td>\n    </tr>\n    <tr>\n      <td>Bitcoin</td>\n      <td>Ledger</td>\n      <td>\n        <a href=\"./examples/browser/bitcoin/ledger.html\">Source</a>\n        &amp;\n        <a href=\"https://liquality.github.io/chainabstractionlayer/examples/browser/bitcoin/ledger.html\">Demo</a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n## Documentation\n\nThe documentation is being generated by [esdoc](https://www.npmjs.com/package/esdoc). Github Page hosted documentation is available at [liquality.github.io/chainabstractionlayer](https://liquality.github.io/chainabstractionlayer/)\n\nIf you want to build documentation locally;\n\n```bash\nnpm run build:docs\n```\n\n\n## License\n\n[MIT](./LICENSE.md)\n",
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"chainabstractionlayer\",\n  \"version\": \"0.1.0\",\n  \"keywords\": [\n    \"blockchain\",\n    \"bitcoin\",\n    \"ethereum\",\n    \"client\",\n    \"abstraction\",\n    \"rpc\",\n    \"wallet\",\n    \"ledger\",\n    \"metamask\"\n  ],\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/liquality/chainabstractionlayer.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/liquality/chainabstractionlayer/issues\"\n  },\n  \"homepage\": \"https://github.com/liquality/chainabstractionlayer#readme\",\n  \"author\": \"Liquality <info@liquality.io>\",\n  \"module\": \"src/index.js\",\n  \"browser\": {\n    \"@ledgerhq/hw-transport-node-hid\": \"@ledgerhq/hw-transport-u2f\"\n  },\n  \"main\": \"dist/index.cjs.js\",\n  \"files\": [\n    \"dist/index.umd.js\",\n    \"src/**/*\"\n  ],\n  \"scripts\": {\n    \"cover\": \"nyc --reporter=html --reporter=text npm test\",\n    \"lint\": \"standard \\\"**/*.js\\\" \\\"**/*.html\\\" \\\"**/*.md\\\"\",\n    \"test\": \"cross-env NODE_ENV=test mocha $npm_package_options_mocha\",\n    \"build:dev:node\": \"webpack --config ./webpack/webpack.node.config.js\",\n    \"build:dev:browser\": \"webpack --config ./webpack/webpack.browser.config.js\",\n    \"build:dev\": \"webpack --config ./webpack/webpack.config.js\",\n    \"watch\": \"WEBPACK_WATCH=true webpack --config ./webpack/webpack.config.js\",\n    \"build:node\": \"cross-env NODE_ENV=production BABEL_ENV=production npm run build:dev:node\",\n    \"build:browser\": \"cross-env NODE_ENV=production BABEL_ENV=production npm run build:dev:browser\",\n    \"build\": \"cross-env NODE_ENV=production BABEL_ENV=production npm run build:dev\",\n    \"copy:browser-examples-to-docs\": \"copy \\\"examples/browser/**/*\\\" docs/examples/browser\",\n    \"copy:browser-build-to-docs\": \"copy \\\"dist/index.umd.js\\\" docs/\",\n    \"build:docs\": \"esdoc\",\n    \"prepare:docs\": \"run-s build build:docs copy:*\",\n    \"push:docs\": \"gh-pages -d docs/ -m \\\"Auto-generated commit for documentation\\\"\",\n    \"publish:docs\": \"run-s prepare:docs push:docs\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.0.0-beta.56\",\n    \"@ledgerhq/hw-app-btc\": \"^4.20.0\",\n    \"@ledgerhq/hw-app-eth\": \"^4.19.0\",\n    \"@ledgerhq/hw-transport-node-hid\": \"~4.21.0\",\n    \"@ledgerhq/hw-transport-u2f\": \"^4.20.0\",\n    \"ajv\": \"^6.5.2\",\n    \"axios\": \"^0.18.0\",\n    \"bech32\": \"^1.1.3\",\n    \"bs58\": \"^4.0.1\",\n    \"crypto-hashing\": \"^1.0.0\",\n    \"dsn-parser\": \"^1.0.1\",\n    \"json-bigint\": \"^0.3.0\",\n    \"lodash\": \"^4.0.0\",\n    \"standard-error\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.0-beta.54\",\n    \"@babel/plugin-transform-runtime\": \"^7.0.0-beta.56\",\n    \"@babel/polyfill\": \"^7.0.0-beta.54\",\n    \"@babel/preset-env\": \"^7.0.0-beta.54\",\n    \"@babel/register\": \"^7.0.0-beta.54\",\n    \"babel-loader\": \"^8.0.0-beta.4\",\n    \"babel-plugin-istanbul\": \"^4.1.6\",\n    \"babel-plugin-lodash\": \"^3.3.4\",\n    \"browserify\": \"^16.2.2\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"copy\": \"^0.3.2\",\n    \"cross-env\": \"^5.2.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint-plugin-html\": \"^4.0.5\",\n    \"eslint-plugin-markdown\": \"^1.0.0-beta.6\",\n    \"gh-pages\": \"^1.2.0\",\n    \"lodash-webpack-plugin\": \"^0.11.5\",\n    \"mocha\": \"^5.2.0\",\n    \"nock\": \"^9.3.0\",\n    \"npm-run-all\": \"^4.1.3\",\n    \"nyc\": \"^12.0.2\",\n    \"pre-commit\": \"^1.2.2\",\n    \"should\": \"^13.2.1\",\n    \"standard\": \"^11.0.1\",\n    \"webpack\": \"^4.16.1\",\n    \"webpack-bundle-analyzer\": \"^2.13.1\",\n    \"webpack-cli\": \"^3.1.0\"\n  },\n  \"engines\": {\n    \"node\": \">=8\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/\"\n    ],\n    \"instrument\": false,\n    \"report-dir\": \"./coverage\",\n    \"sourceMap\": false\n  },\n  \"options\": {\n    \"mocha\": \"--require @babel/register --require @babel/polyfill --timeout 20000 --recursive --require should\"\n  },\n  \"pre-commit\": [\n    \"lint\",\n    \"build\",\n    \"test\"\n  ],\n  \"standard\": {\n    \"plugins\": [\n      \"html\",\n      \"markdown\"\n    ],\n    \"ignore\": [\n      \"dist/**\",\n      \"docs/**\"\n    ]\n  }\n}\n",
    "longname": "/Users/harsh/Work/consensys/chainabstractionlayer/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]